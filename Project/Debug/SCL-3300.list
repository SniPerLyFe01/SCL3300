
SCL-3300.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004548  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080047f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  24000010  08004808  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  240000ec  08004808  000200ec  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000beb4  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001ccd  00000000  00000000  0002bef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000970  00000000  00000000  0002dbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000888  00000000  00000000  0002e530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035884  00000000  00000000  0002edb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c699  00000000  00000000  0006463c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001524e4  00000000  00000000  00070cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c31b9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000024e0  00000000  00000000  001c320c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080047c8 	.word	0x080047c8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080047c8 	.word	0x080047c8

080002d8 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ee:	4b22      	ldr	r3, [pc, #136]	; (8000378 <MX_GPIO_Init+0xa0>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a20      	ldr	r2, [pc, #128]	; (8000378 <MX_GPIO_Init+0xa0>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_GPIO_Init+0xa0>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_GPIO_Init+0xa0>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a19      	ldr	r2, [pc, #100]	; (8000378 <MX_GPIO_Init+0xa0>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <MX_GPIO_Init+0xa0>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800032a:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_GPIO_Init+0xa0>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4a11      	ldr	r2, [pc, #68]	; (8000378 <MX_GPIO_Init+0xa0>)
 8000332:	f043 0308 	orr.w	r3, r3, #8
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_GPIO_Init+0xa0>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0308 	and.w	r3, r3, #8
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2120      	movs	r1, #32
 800034c:	480b      	ldr	r0, [pc, #44]	; (800037c <MX_GPIO_Init+0xa4>)
 800034e:	f001 f929 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000352:	2320      	movs	r3, #32
 8000354:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	4619      	mov	r1, r3
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_GPIO_Init+0xa4>)
 800036a:	f000 ff6b 	bl	8001244 <HAL_GPIO_Init>

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	58024400 	.word	0x58024400
 800037c:	58020c00 	.word	0x58020c00

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b090      	sub	sp, #64	; 0x40
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000386:	f000 fdb7 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038a:	f000 f87b 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038e:	f7ff ffa3 	bl	80002d8 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000392:	f000 fbfb 	bl	8000b8c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  struct SCL dev;
  SCL3300_Init();
 8000396:	f000 f93b 	bl	8000610 <SCL3300_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  start_time = HAL_GetTick();
 800039a:	f000 fe33 	bl	8001004 <HAL_GetTick>
 800039e:	ee07 0a90 	vmov	s15, r0
 80003a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003a6:	4b2e      	ldr	r3, [pc, #184]	; (8000460 <main+0xe0>)
 80003a8:	edc3 7a00 	vstr	s15, [r3]
      Acc_X(&dev);
 80003ac:	463b      	mov	r3, r7
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 fa4e 	bl	8000850 <Acc_X>
      Acc_Y(&dev);
 80003b4:	463b      	mov	r3, r7
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 fa92 	bl	80008e0 <Acc_Y>
      Acc_Z(&dev);
 80003bc:	463b      	mov	r3, r7
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 fac4 	bl	800094c <Acc_Z>
//      STO_Sensor(&dev);
      Temp(&dev);
 80003c4:	463b      	mov	r3, r7
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 fb9e 	bl	8000b08 <Temp>
      Ang_X(&dev);
 80003cc:	463b      	mov	r3, r7
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 faf2 	bl	80009b8 <Ang_X>
      Ang_Y(&dev);
 80003d4:	463b      	mov	r3, r7
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 fb26 	bl	8000a28 <Ang_Y>
      Ang_Z(&dev);
 80003dc:	463b      	mov	r3, r7
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 fb5a 	bl	8000a98 <Ang_Z>

//      Accel_X = dev.ACC_X;
//      Accel_Y = dev.ACC_Y;
//      Accel_Z = dev.ACC_Z;

      temperature = dev.TEMP;
 80003e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80003e8:	491e      	ldr	r1, [pc, #120]	; (8000464 <main+0xe4>)
 80003ea:	e9c1 2300 	strd	r2, r3, [r1]
      Angle_X = dev.ANG_X;
 80003ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80003f2:	491d      	ldr	r1, [pc, #116]	; (8000468 <main+0xe8>)
 80003f4:	e9c1 2300 	strd	r2, r3, [r1]
      Angle_Y = dev.ANG_Y;
 80003f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80003fc:	491b      	ldr	r1, [pc, #108]	; (800046c <main+0xec>)
 80003fe:	e9c1 2300 	strd	r2, r3, [r1]
      Angle_Z = dev.ANG_Z;
 8000402:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000406:	491a      	ldr	r1, [pc, #104]	; (8000470 <main+0xf0>)
 8000408:	e9c1 2300 	strd	r2, r3, [r1]

      end_time = HAL_GetTick();
 800040c:	f000 fdfa 	bl	8001004 <HAL_GetTick>
 8000410:	ee07 0a90 	vmov	s15, r0
 8000414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000418:	4b16      	ldr	r3, [pc, #88]	; (8000474 <main+0xf4>)
 800041a:	edc3 7a00 	vstr	s15, [r3]
      execution_time = end_time - start_time;
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <main+0xf4>)
 8000420:	ed93 7a00 	vldr	s14, [r3]
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <main+0xe0>)
 8000426:	edd3 7a00 	vldr	s15, [r3]
 800042a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <main+0xf8>)
 8000430:	edc3 7a00 	vstr	s15, [r3]
      execution_time = execution_time / 1000;
 8000434:	4b10      	ldr	r3, [pc, #64]	; (8000478 <main+0xf8>)
 8000436:	ed93 7a00 	vldr	s14, [r3]
 800043a:	eddf 6a10 	vldr	s13, [pc, #64]	; 800047c <main+0xfc>
 800043e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000442:	4b0d      	ldr	r3, [pc, #52]	; (8000478 <main+0xf8>)
 8000444:	edc3 7a00 	vstr	s15, [r3]
      freq3 = 1 / execution_time;
 8000448:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <main+0xf8>)
 800044a:	ed93 7a00 	vldr	s14, [r3]
 800044e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <main+0x100>)
 8000458:	edc3 7a00 	vstr	s15, [r3]
	  start_time = HAL_GetTick();
 800045c:	e79d      	b.n	800039a <main+0x1a>
 800045e:	bf00      	nop
 8000460:	24000050 	.word	0x24000050
 8000464:	24000030 	.word	0x24000030
 8000468:	24000038 	.word	0x24000038
 800046c:	24000040 	.word	0x24000040
 8000470:	24000048 	.word	0x24000048
 8000474:	24000054 	.word	0x24000054
 8000478:	24000058 	.word	0x24000058
 800047c:	447a0000 	.word	0x447a0000
 8000480:	2400005c 	.word	0x2400005c

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b09c      	sub	sp, #112	; 0x70
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800048e:	224c      	movs	r2, #76	; 0x4c
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f004 f990 	bl	80047b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2220      	movs	r2, #32
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f004 f98a 	bl	80047b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004a4:	2002      	movs	r0, #2
 80004a6:	f001 f897 	bl	80015d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004aa:	2300      	movs	r3, #0
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	4b34      	ldr	r3, [pc, #208]	; (8000580 <SystemClock_Config+0xfc>)
 80004b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b2:	4a33      	ldr	r2, [pc, #204]	; (8000580 <SystemClock_Config+0xfc>)
 80004b4:	f023 0301 	bic.w	r3, r3, #1
 80004b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004ba:	4b31      	ldr	r3, [pc, #196]	; (8000580 <SystemClock_Config+0xfc>)
 80004bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	4b2f      	ldr	r3, [pc, #188]	; (8000584 <SystemClock_Config+0x100>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004cc:	4a2d      	ldr	r2, [pc, #180]	; (8000584 <SystemClock_Config+0x100>)
 80004ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <SystemClock_Config+0x100>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004e0:	bf00      	nop
 80004e2:	4b28      	ldr	r3, [pc, #160]	; (8000584 <SystemClock_Config+0x100>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004ee:	d1f8      	bne.n	80004e2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 80004f0:	2312      	movs	r3, #18
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f8:	2340      	movs	r3, #64	; 0x40
 80004fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000500:	2320      	movs	r3, #32
 8000502:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000504:	2302      	movs	r3, #2
 8000506:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000508:	2300      	movs	r3, #0
 800050a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800050c:	2308      	movs	r3, #8
 800050e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000510:	2319      	movs	r3, #25
 8000512:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000514:	2302      	movs	r3, #2
 8000516:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000518:	2302      	movs	r3, #2
 800051a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800051c:	2302      	movs	r3, #2
 800051e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000520:	230c      	movs	r3, #12
 8000522:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000524:	2300      	movs	r3, #0
 8000526:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000530:	4618      	mov	r0, r3
 8000532:	f001 f88b 	bl	800164c <HAL_RCC_OscConfig>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800053c:	f000 f824 	bl	8000588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000540:	233f      	movs	r3, #63	; 0x3f
 8000542:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000544:	2303      	movs	r3, #3
 8000546:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800054c:	2308      	movs	r3, #8
 800054e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000550:	2340      	movs	r3, #64	; 0x40
 8000552:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000554:	2340      	movs	r3, #64	; 0x40
 8000556:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800055c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800055e:	2340      	movs	r3, #64	; 0x40
 8000560:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fcca 	bl	8001f00 <HAL_RCC_ClockConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000572:	f000 f809 	bl	8000588 <Error_Handler>
  }
}
 8000576:	bf00      	nop
 8000578:	3770      	adds	r7, #112	; 0x70
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	58000400 	.word	0x58000400
 8000584:	58024800 	.word	0x58024800

08000588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
}
 800058e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000590:	e7fe      	b.n	8000590 <Error_Handler+0x8>
	...

08000594 <cs_high>:
#include "scl3300.h"


/* Static Functions */
static void cs_high()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS, SPI_CS_PIN, SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2120      	movs	r1, #32
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <cs_high+0x14>)
 800059e:	f001 f801 	bl	80015a4 <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	58020c00 	.word	0x58020c00

080005ac <cs_low>:
static void cs_low()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS, SPI_CS_PIN, RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <cs_low+0x14>)
 80005b6:	f000 fff5 	bl	80015a4 <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	58020c00 	.word	0x58020c00

080005c4 <CRC8>:
static uint8_t CRC8(uint8_t BitValue, uint8_t CRC_)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	460a      	mov	r2, r1
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	4613      	mov	r3, r2
 80005d2:	71bb      	strb	r3, [r7, #6]
	uint8_t Temp;
	Temp = (uint8_t)(CRC_ & 0x80);
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80005da:	73fb      	strb	r3, [r7, #15]
	if (BitValue == 0x01)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d104      	bne.n	80005ec <CRC8+0x28>
	{
		Temp ^= 0x80;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80005e8:	43db      	mvns	r3, r3
 80005ea:	73fb      	strb	r3, [r7, #15]
	}
	CRC_ <<= 1;
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	71bb      	strb	r3, [r7, #6]
	if (Temp > 0)
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d003      	beq.n	8000600 <CRC8+0x3c>
	{
		CRC_ ^= 0x1D;
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	f083 031d 	eor.w	r3, r3, #29
 80005fe:	71bb      	strb	r3, [r7, #6]
	}
	return CRC_;
 8000600:	79bb      	ldrb	r3, [r7, #6]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
	...

08000610 <SCL3300_Init>:

uint8_t SCL3300_Init(){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
    uint8_t rslt;
    uint32_t value;

    // Power On time
//    HAL_Delay(200);
    rslt = write_reg(WKUP_FROM_POW_DOWN);
 8000616:	4836      	ldr	r0, [pc, #216]	; (80006f0 <SCL3300_Init+0xe0>)
 8000618:	f000 f87a 	bl	8000710 <write_reg>
 800061c:	4603      	mov	r3, r0
 800061e:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 fcfb 	bl	800101c <HAL_Delay>
    rslt = write_reg(SW_RESET);
 8000626:	4833      	ldr	r0, [pc, #204]	; (80006f4 <SCL3300_Init+0xe4>)
 8000628:	f000 f872 	bl	8000710 <write_reg>
 800062c:	4603      	mov	r3, r0
 800062e:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fcf3 	bl	800101c <HAL_Delay>
    rslt = write_reg(CHANGE_TO_MODE2);
 8000636:	4830      	ldr	r0, [pc, #192]	; (80006f8 <SCL3300_Init+0xe8>)
 8000638:	f000 f86a 	bl	8000710 <write_reg>
 800063c:	4603      	mov	r3, r0
 800063e:	71fb      	strb	r3, [r7, #7]
    rslt = write_reg(ENABLE_ANG_OUTPUTS);
 8000640:	482e      	ldr	r0, [pc, #184]	; (80006fc <SCL3300_Init+0xec>)
 8000642:	f000 f865 	bl	8000710 <write_reg>
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(20);
 800064a:	2014      	movs	r0, #20
 800064c:	f000 fce6 	bl	800101c <HAL_Delay>
    rslt = read_reg(READ_CMD, &value);
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	482a      	ldr	r0, [pc, #168]	; (8000700 <SCL3300_Init+0xf0>)
 8000656:	f000 f883 	bl	8000760 <read_reg>
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 800065e:	2001      	movs	r0, #1
 8000660:	f000 fcdc 	bl	800101c <HAL_Delay>
    rslt = read_reg(READ_STATUS_SUMMARY, &value);
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4826      	ldr	r0, [pc, #152]	; (8000704 <SCL3300_Init+0xf4>)
 800066a:	f000 f879 	bl	8000760 <read_reg>
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 8000672:	2001      	movs	r0, #1
 8000674:	f000 fcd2 	bl	800101c <HAL_Delay>
    rslt = read_reg(READ_STATUS_SUMMARY, &value);
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4821      	ldr	r0, [pc, #132]	; (8000704 <SCL3300_Init+0xf4>)
 800067e:	f000 f86f 	bl	8000760 <read_reg>
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 8000686:	2001      	movs	r0, #1
 8000688:	f000 fcc8 	bl	800101c <HAL_Delay>
    rslt = read_reg(READ_STATUS_SUMMARY, &value);
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	481c      	ldr	r0, [pc, #112]	; (8000704 <SCL3300_Init+0xf4>)
 8000692:	f000 f865 	bl	8000760 <read_reg>
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f000 fcbe 	bl	800101c <HAL_Delay>
    rslt = read_reg(READ_CMD, &value);
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4816      	ldr	r0, [pc, #88]	; (8000700 <SCL3300_Init+0xf0>)
 80006a6:	f000 f85b 	bl	8000760 <read_reg>
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f000 fcb4 	bl	800101c <HAL_Delay>
    rslt = write_reg(SWITCH_TO_BANK0);
 80006b4:	4814      	ldr	r0, [pc, #80]	; (8000708 <SCL3300_Init+0xf8>)
 80006b6:	f000 f82b 	bl	8000710 <write_reg>
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 fcac 	bl	800101c <HAL_Delay>
    rslt = read_reg(READ_WHOAMI, &value);
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	4810      	ldr	r0, [pc, #64]	; (800070c <SCL3300_Init+0xfc>)
 80006ca:	f000 f849 	bl	8000760 <read_reg>
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 fca2 	bl	800101c <HAL_Delay>
    rslt = read_reg(READ_CMD, &value);
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4808      	ldr	r0, [pc, #32]	; (8000700 <SCL3300_Init+0xf0>)
 80006de:	f000 f83f 	bl	8000760 <read_reg>
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]

  return rslt;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	b400001f 	.word	0xb400001f
 80006f4:	b4002098 	.word	0xb4002098
 80006f8:	b4000102 	.word	0xb4000102
 80006fc:	b0001f6f 	.word	0xb0001f6f
 8000700:	340000df 	.word	0x340000df
 8000704:	180000e5 	.word	0x180000e5
 8000708:	fc000073 	.word	0xfc000073
 800070c:	40000091 	.word	0x40000091

08000710 <write_reg>:
uint8_t write_reg(uint32_t command)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	uint8_t read_frame[4];
	read_frame[0] = (command>>24) & 0xFF;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	0e1b      	lsrs	r3, r3, #24
 800071c:	b2db      	uxtb	r3, r3
 800071e:	733b      	strb	r3, [r7, #12]
	read_frame[1] = (command>>16) & 0xFF;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	0c1b      	lsrs	r3, r3, #16
 8000724:	b2db      	uxtb	r3, r3
 8000726:	737b      	strb	r3, [r7, #13]
	read_frame[2] = (command>>8) & 0xFF;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b2db      	uxtb	r3, r3
 800072e:	73bb      	strb	r3, [r7, #14]
	read_frame[3] =  command & 0xFF;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	73fb      	strb	r3, [r7, #15]

	cs_high();
 8000736:	f7ff ff2d 	bl	8000594 <cs_high>
//	HAL_Delay(1);
	cs_low();
 800073a:	f7ff ff37 	bl	80005ac <cs_low>
	HAL_SPI_Transmit(SCL_SPI, (uint8_t *)read_frame, 4, 1000);
 800073e:	f107 010c 	add.w	r1, r7, #12
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	2204      	movs	r2, #4
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <write_reg+0x4c>)
 800074a:	f003 fb9b 	bl	8003e84 <HAL_SPI_Transmit>
	cs_high();
 800074e:	f7ff ff21 	bl	8000594 <cs_high>
	return 0;
 8000752:	2300      	movs	r3, #0
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	24000060 	.word	0x24000060

08000760 <read_reg>:
uint8_t read_reg(uint32_t command, uint32_t *data)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	uint8_t  CRC_Check;
	uint8_t  read_frame[4];
	uint32_t Rxdata;

	read_frame[0] = (command>>24) & 0xFF;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	0e1b      	lsrs	r3, r3, #24
 800076e:	b2db      	uxtb	r3, r3
 8000770:	733b      	strb	r3, [r7, #12]
	read_frame[1] = (command>>16) & 0xFF;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	0c1b      	lsrs	r3, r3, #16
 8000776:	b2db      	uxtb	r3, r3
 8000778:	737b      	strb	r3, [r7, #13]
	read_frame[2] = (command>>8) & 0xFF;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	b2db      	uxtb	r3, r3
 8000780:	73bb      	strb	r3, [r7, #14]
	read_frame[3] =  command & 0xFF;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_val[4];
	cs_high();
 8000788:	f7ff ff04 	bl	8000594 <cs_high>
//	HAL_Delay(1);
	cs_low();
 800078c:	f7ff ff0e 	bl	80005ac <cs_low>
	HAL_SPI_Transmit(SCL_SPI, (uint8_t *)read_frame, 4, 1000);
 8000790:	f107 010c 	add.w	r1, r7, #12
 8000794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000798:	2204      	movs	r2, #4
 800079a:	4818      	ldr	r0, [pc, #96]	; (80007fc <read_reg+0x9c>)
 800079c:	f003 fb72 	bl	8003e84 <HAL_SPI_Transmit>

	cs_high();
 80007a0:	f7ff fef8 	bl	8000594 <cs_high>
//	HAL_Delay(1);
	cs_low();
 80007a4:	f7ff ff02 	bl	80005ac <cs_low>

	HAL_SPI_Receive (SCL_SPI, (uint8_t *)reg_val, 4, 1000);
 80007a8:	f107 0108 	add.w	r1, r7, #8
 80007ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b0:	2204      	movs	r2, #4
 80007b2:	4812      	ldr	r0, [pc, #72]	; (80007fc <read_reg+0x9c>)
 80007b4:	f003 fd62 	bl	800427c <HAL_SPI_Receive>
	cs_high();
 80007b8:	f7ff feec 	bl	8000594 <cs_high>
	Rxdata = ((uint32_t)reg_val[0] << 24) | ((uint32_t)reg_val[1] << 16)
 80007bc:	7a3b      	ldrb	r3, [r7, #8]
 80007be:	061a      	lsls	r2, r3, #24
 80007c0:	7a7b      	ldrb	r3, [r7, #9]
 80007c2:	041b      	lsls	r3, r3, #16
 80007c4:	431a      	orrs	r2, r3
			| ((uint32_t)reg_val[2] << 8) | reg_val[3];
 80007c6:	7abb      	ldrb	r3, [r7, #10]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	4313      	orrs	r3, r2
 80007cc:	7afa      	ldrb	r2, [r7, #11]
	Rxdata = ((uint32_t)reg_val[0] << 24) | ((uint32_t)reg_val[1] << 16)
 80007ce:	4313      	orrs	r3, r2
 80007d0:	617b      	str	r3, [r7, #20]

	*data = (Rxdata & 0xFFFFFF00) >> 8;
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	0a1a      	lsrs	r2, r3, #8
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	601a      	str	r2, [r3, #0]
	CRC_Check = CalculateCRC(Rxdata);
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f000 f810 	bl	8000800 <CalculateCRC>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
	if(CRC_Check != reg_val[3])
 80007e4:	7afb      	ldrb	r3, [r7, #11]
 80007e6:	7cfa      	ldrb	r2, [r7, #19]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d001      	beq.n	80007f0 <read_reg+0x90>
	  {
	    return -1;
 80007ec:	23ff      	movs	r3, #255	; 0xff
 80007ee:	e000      	b.n	80007f2 <read_reg+0x92>
	  }

	return 0;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	24000060 	.word	0x24000060

08000800 <CalculateCRC>:
uint8_t CalculateCRC(uint32_t Data)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	uint8_t BitIndex;
	uint8_t BitValue;
	uint8_t CRC_;
	CRC_ = 0xFF;
 8000808:	23ff      	movs	r3, #255	; 0xff
 800080a:	73bb      	strb	r3, [r7, #14]
	for (BitIndex = 31; BitIndex > 7; BitIndex--)
 800080c:	231f      	movs	r3, #31
 800080e:	73fb      	strb	r3, [r7, #15]
 8000810:	e012      	b.n	8000838 <CalculateCRC+0x38>
	{
		BitValue = (uint8_t)((Data >> BitIndex) & 0x01);
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	fa22 f303 	lsr.w	r3, r2, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	737b      	strb	r3, [r7, #13]
		CRC_ = CRC8(BitValue, CRC_);
 8000822:	7bba      	ldrb	r2, [r7, #14]
 8000824:	7b7b      	ldrb	r3, [r7, #13]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fecb 	bl	80005c4 <CRC8>
 800082e:	4603      	mov	r3, r0
 8000830:	73bb      	strb	r3, [r7, #14]
	for (BitIndex = 31; BitIndex > 7; BitIndex--)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3b01      	subs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b07      	cmp	r3, #7
 800083c:	d8e9      	bhi.n	8000812 <CalculateCRC+0x12>
	}
	CRC_ = (uint8_t)~CRC_;
 800083e:	7bbb      	ldrb	r3, [r7, #14]
 8000840:	43db      	mvns	r3, r3
 8000842:	73bb      	strb	r3, [r7, #14]
	return CRC_;
 8000844:	7bbb      	ldrb	r3, [r7, #14]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <Acc_X>:

uint8_t Acc_X(struct SCL *dev){
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint8_t rslt;
      uint32_t value;
      uint8_t RC_check;
      double data;
      uint32_t garbage;
      rslt = read_reg(READ_STATUS_SUMMARY, &garbage);
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	4619      	mov	r1, r3
 800085e:	481d      	ldr	r0, [pc, #116]	; (80008d4 <Acc_X+0x84>)
 8000860:	f7ff ff7e 	bl	8000760 <read_reg>
 8000864:	4603      	mov	r3, r0
 8000866:	77fb      	strb	r3, [r7, #31]
//      HAL_Delay(1);

      rslt = read_reg(READ_STATUS_SUMMARY, &garbage);
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	4619      	mov	r1, r3
 800086e:	4819      	ldr	r0, [pc, #100]	; (80008d4 <Acc_X+0x84>)
 8000870:	f7ff ff76 	bl	8000760 <read_reg>
 8000874:	4603      	mov	r3, r0
 8000876:	77fb      	strb	r3, [r7, #31]
//      HAL_Delay(1);

      rslt = read_reg(READ_ACC_X, &value);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4619      	mov	r1, r3
 800087e:	4816      	ldr	r0, [pc, #88]	; (80008d8 <Acc_X+0x88>)
 8000880:	f7ff ff6e 	bl	8000760 <read_reg>
 8000884:	4603      	mov	r3, r0
 8000886:	77fb      	strb	r3, [r7, #31]

      RC_check = ((value & 0xFF0000) >> 16) & 0xFF;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	0c1b      	lsrs	r3, r3, #16
 800088c:	77bb      	strb	r3, [r7, #30]
      RC_check = RC_check << 6;
 800088e:	7fbb      	ldrb	r3, [r7, #30]
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	77bb      	strb	r3, [r7, #30]
      RC_check = RC_check >> 6;
 8000894:	7fbb      	ldrb	r3, [r7, #30]
 8000896:	099b      	lsrs	r3, r3, #6
 8000898:	77bb      	strb	r3, [r7, #30]
if(RC_check == RS_NORMAL)
 800089a:	7fbb      	ldrb	r3, [r7, #30]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d114      	bne.n	80008ca <Acc_X+0x7a>
{

      value = value & 0xFFFF;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	60fb      	str	r3, [r7, #12]

      data = value / 12000;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <Acc_X+0x8c>)
 80008aa:	fba2 2303 	umull	r2, r3, r2, r3
 80008ae:	0a1b      	lsrs	r3, r3, #8
 80008b0:	ee07 3a90 	vmov	s15, r3
 80008b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008b8:	ed87 7b04 	vstr	d7, [r7, #16]
      dev-> ACC_X = data;
 80008bc:	6879      	ldr	r1, [r7, #4]
 80008be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80008c2:	e9c1 2300 	strd	r2, r3, [r1]
}else{
      return -1;
}
  return rslt;
 80008c6:	7ffb      	ldrb	r3, [r7, #31]
 80008c8:	e000      	b.n	80008cc <Acc_X+0x7c>
      return -1;
 80008ca:	23ff      	movs	r3, #255	; 0xff
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	180000e5 	.word	0x180000e5
 80008d8:	040000f7 	.word	0x040000f7
 80008dc:	057619f1 	.word	0x057619f1

080008e0 <Acc_Y>:
uint8_t Acc_Y(struct SCL *dev){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint8_t rslt;
      uint32_t value;
      uint8_t RC_check;
      double data;

      rslt = read_reg(READ_ACC_Y, &value);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	4815      	ldr	r0, [pc, #84]	; (8000944 <Acc_Y+0x64>)
 80008f0:	f7ff ff36 	bl	8000760 <read_reg>
 80008f4:	4603      	mov	r3, r0
 80008f6:	77fb      	strb	r3, [r7, #31]

      RC_check = ((value & 0xFF0000) >> 16) & 0xFF;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	0c1b      	lsrs	r3, r3, #16
 80008fc:	77bb      	strb	r3, [r7, #30]
      RC_check = RC_check << 6;
 80008fe:	7fbb      	ldrb	r3, [r7, #30]
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	77bb      	strb	r3, [r7, #30]
      RC_check = RC_check >> 6;
 8000904:	7fbb      	ldrb	r3, [r7, #30]
 8000906:	099b      	lsrs	r3, r3, #6
 8000908:	77bb      	strb	r3, [r7, #30]
if(RC_check == RS_NORMAL)
 800090a:	7fbb      	ldrb	r3, [r7, #30]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d114      	bne.n	800093a <Acc_Y+0x5a>
{

      value = value & 0xFFFF;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	b29b      	uxth	r3, r3
 8000914:	60fb      	str	r3, [r7, #12]

      data = value / 12000;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <Acc_Y+0x68>)
 800091a:	fba2 2303 	umull	r2, r3, r2, r3
 800091e:	0a1b      	lsrs	r3, r3, #8
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000928:	ed87 7b04 	vstr	d7, [r7, #16]
      dev-> ACC_Y = data;
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000932:	e9c1 2302 	strd	r2, r3, [r1, #8]
}else{
      return -1;
}
  return rslt;
 8000936:	7ffb      	ldrb	r3, [r7, #31]
 8000938:	e000      	b.n	800093c <Acc_Y+0x5c>
      return -1;
 800093a:	23ff      	movs	r3, #255	; 0xff
}
 800093c:	4618      	mov	r0, r3
 800093e:	3720      	adds	r7, #32
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	080000fd 	.word	0x080000fd
 8000948:	057619f1 	.word	0x057619f1

0800094c <Acc_Z>:
uint8_t Acc_Z(struct SCL *dev){
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint8_t rslt;
      uint32_t value;
      uint8_t RC_check;
      double data;

      rslt = read_reg(READ_ACC_Z, &value);
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4619      	mov	r1, r3
 800095a:	4815      	ldr	r0, [pc, #84]	; (80009b0 <Acc_Z+0x64>)
 800095c:	f7ff ff00 	bl	8000760 <read_reg>
 8000960:	4603      	mov	r3, r0
 8000962:	77fb      	strb	r3, [r7, #31]

      RC_check = ((value & 0xFF0000) >> 16) & 0xFF;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	0c1b      	lsrs	r3, r3, #16
 8000968:	77bb      	strb	r3, [r7, #30]
      RC_check = RC_check << 6;
 800096a:	7fbb      	ldrb	r3, [r7, #30]
 800096c:	019b      	lsls	r3, r3, #6
 800096e:	77bb      	strb	r3, [r7, #30]
      RC_check = RC_check >> 6;
 8000970:	7fbb      	ldrb	r3, [r7, #30]
 8000972:	099b      	lsrs	r3, r3, #6
 8000974:	77bb      	strb	r3, [r7, #30]
if(RC_check == RS_NORMAL)
 8000976:	7fbb      	ldrb	r3, [r7, #30]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d114      	bne.n	80009a6 <Acc_Z+0x5a>
{

      value = value & 0xFFFF;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	b29b      	uxth	r3, r3
 8000980:	60fb      	str	r3, [r7, #12]

      data = value / 12000;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <Acc_Z+0x68>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000994:	ed87 7b04 	vstr	d7, [r7, #16]
      dev-> ACC_Z = data;
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800099e:	e9c1 2304 	strd	r2, r3, [r1, #16]
}else{
      return -1;
}
  return rslt;
 80009a2:	7ffb      	ldrb	r3, [r7, #31]
 80009a4:	e000      	b.n	80009a8 <Acc_Z+0x5c>
      return -1;
 80009a6:	23ff      	movs	r3, #255	; 0xff
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	0c0000fb 	.word	0x0c0000fb
 80009b4:	057619f1 	.word	0x057619f1

080009b8 <Ang_X>:
uint8_t Ang_X(struct SCL *dev){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint8_t rslt;
      uint32_t value;
      uint8_t RC_check;
      double data;

      rslt = read_reg(READ_ANG_X, &value);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	4816      	ldr	r0, [pc, #88]	; (8000a20 <Ang_X+0x68>)
 80009c8:	f7ff feca 	bl	8000760 <read_reg>
 80009cc:	4603      	mov	r3, r0
 80009ce:	77fb      	strb	r3, [r7, #31]

      RC_check = ((value & 0xFF0000) >> 16) & 0xFF;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	0c1b      	lsrs	r3, r3, #16
 80009d4:	77bb      	strb	r3, [r7, #30]
      RC_check = RC_check << 6;
 80009d6:	7fbb      	ldrb	r3, [r7, #30]
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	77bb      	strb	r3, [r7, #30]
      RC_check = RC_check >> 6;
 80009dc:	7fbb      	ldrb	r3, [r7, #30]
 80009de:	099b      	lsrs	r3, r3, #6
 80009e0:	77bb      	strb	r3, [r7, #30]
if(RC_check == RS_NORMAL)
 80009e2:	7fbb      	ldrb	r3, [r7, #30]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d115      	bne.n	8000a14 <Ang_X+0x5c>
{

      value = value & 0xFFFF;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	60fb      	str	r3, [r7, #12]
      data = value / 182;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <Ang_X+0x6c>)
 80009f4:	fba2 2303 	umull	r2, r3, r2, r3
 80009f8:	099b      	lsrs	r3, r3, #6
 80009fa:	ee07 3a90 	vmov	s15, r3
 80009fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000a02:	ed87 7b04 	vstr	d7, [r7, #16]
      dev-> ANG_X = data;
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a0c:	e9c1 2308 	strd	r2, r3, [r1, #32]
}else{
      return -1;
}
  return rslt;
 8000a10:	7ffb      	ldrb	r3, [r7, #31]
 8000a12:	e000      	b.n	8000a16 <Ang_X+0x5e>
      return -1;
 8000a14:	23ff      	movs	r3, #255	; 0xff
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	240000c7 	.word	0x240000c7
 8000a24:	b40b40b5 	.word	0xb40b40b5

08000a28 <Ang_Y>:
uint8_t Ang_Y(struct SCL *dev){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint8_t rslt;
      uint32_t value;
      uint8_t RC_check;
      double data;

      rslt = read_reg(READ_ANG_Y, &value);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	4816      	ldr	r0, [pc, #88]	; (8000a90 <Ang_Y+0x68>)
 8000a38:	f7ff fe92 	bl	8000760 <read_reg>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	77fb      	strb	r3, [r7, #31]

      RC_check = ((value & 0xFF0000) >> 16) & 0xFF;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	77bb      	strb	r3, [r7, #30]
      RC_check = RC_check << 6;
 8000a46:	7fbb      	ldrb	r3, [r7, #30]
 8000a48:	019b      	lsls	r3, r3, #6
 8000a4a:	77bb      	strb	r3, [r7, #30]
      RC_check = RC_check >> 6;
 8000a4c:	7fbb      	ldrb	r3, [r7, #30]
 8000a4e:	099b      	lsrs	r3, r3, #6
 8000a50:	77bb      	strb	r3, [r7, #30]
if(RC_check == RS_NORMAL)
 8000a52:	7fbb      	ldrb	r3, [r7, #30]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d115      	bne.n	8000a84 <Ang_Y+0x5c>
{

      value = value & 0xFFFF;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	60fb      	str	r3, [r7, #12]
      data = value / 182;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	085b      	lsrs	r3, r3, #1
 8000a62:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <Ang_Y+0x6c>)
 8000a64:	fba2 2303 	umull	r2, r3, r2, r3
 8000a68:	099b      	lsrs	r3, r3, #6
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000a72:	ed87 7b04 	vstr	d7, [r7, #16]
//      data = (value / 16384)*90;
      dev-> ANG_Y = data;
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a7c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}else{
      return -1;
}
  return rslt;
 8000a80:	7ffb      	ldrb	r3, [r7, #31]
 8000a82:	e000      	b.n	8000a86 <Ang_Y+0x5e>
      return -1;
 8000a84:	23ff      	movs	r3, #255	; 0xff
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	280000cd 	.word	0x280000cd
 8000a94:	b40b40b5 	.word	0xb40b40b5

08000a98 <Ang_Z>:
uint8_t Ang_Z(struct SCL *dev){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint8_t rslt;
      uint32_t value;
      uint8_t RC_check;
      double data;

      rslt = read_reg(READ_ANG_Z, &value);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4816      	ldr	r0, [pc, #88]	; (8000b00 <Ang_Z+0x68>)
 8000aa8:	f7ff fe5a 	bl	8000760 <read_reg>
 8000aac:	4603      	mov	r3, r0
 8000aae:	77fb      	strb	r3, [r7, #31]

      RC_check = ((value & 0xFF0000) >> 16) & 0xFF;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	0c1b      	lsrs	r3, r3, #16
 8000ab4:	77bb      	strb	r3, [r7, #30]
      RC_check = RC_check << 6;
 8000ab6:	7fbb      	ldrb	r3, [r7, #30]
 8000ab8:	019b      	lsls	r3, r3, #6
 8000aba:	77bb      	strb	r3, [r7, #30]
      RC_check = RC_check >> 6;
 8000abc:	7fbb      	ldrb	r3, [r7, #30]
 8000abe:	099b      	lsrs	r3, r3, #6
 8000ac0:	77bb      	strb	r3, [r7, #30]
if(RC_check == RS_NORMAL)
 8000ac2:	7fbb      	ldrb	r3, [r7, #30]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d115      	bne.n	8000af4 <Ang_Z+0x5c>
{

      value = value & 0xFFFF;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	60fb      	str	r3, [r7, #12]

      data = value / 182;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <Ang_Z+0x6c>)
 8000ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad8:	099b      	lsrs	r3, r3, #6
 8000ada:	ee07 3a90 	vmov	s15, r3
 8000ade:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ae2:	ed87 7b04 	vstr	d7, [r7, #16]
//      data = (value / 16384)*90;
      dev-> ANG_Z = data;
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000aec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}else{
      return -1;
}
  return rslt;
 8000af0:	7ffb      	ldrb	r3, [r7, #31]
 8000af2:	e000      	b.n	8000af6 <Ang_Z+0x5e>
      return -1;
 8000af4:	23ff      	movs	r3, #255	; 0xff
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2c0000cb 	.word	0x2c0000cb
 8000b04:	b40b40b5 	.word	0xb40b40b5

08000b08 <Temp>:
uint8_t Temp(struct SCL *dev){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    uint8_t rslt;
    uint32_t value;
    uint8_t RC_check;
    double data;

    rslt = read_reg(READ_TEMPERATURE, &value);
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	481c      	ldr	r0, [pc, #112]	; (8000b88 <Temp+0x80>)
 8000b18:	f7ff fe22 	bl	8000760 <read_reg>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	77fb      	strb	r3, [r7, #31]

    RC_check = ((value & 0xFF0000) >> 16) & 0xFF;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	0c1b      	lsrs	r3, r3, #16
 8000b24:	77bb      	strb	r3, [r7, #30]
    RC_check = RC_check << 6;
 8000b26:	7fbb      	ldrb	r3, [r7, #30]
 8000b28:	019b      	lsls	r3, r3, #6
 8000b2a:	77bb      	strb	r3, [r7, #30]
    RC_check = RC_check >> 6;
 8000b2c:	7fbb      	ldrb	r3, [r7, #30]
 8000b2e:	099b      	lsrs	r3, r3, #6
 8000b30:	77bb      	strb	r3, [r7, #30]
 if(RC_check == RS_NORMAL){
 8000b32:	7fbb      	ldrb	r3, [r7, #30]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d118      	bne.n	8000b6a <Temp+0x62>

     value = value & 0xFFFF;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	60fb      	str	r3, [r7, #12]

     data = (-273) + (value / 18.9);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000b48:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000b78 <Temp+0x70>
 8000b4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b50:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000b80 <Temp+0x78>
 8000b54:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000b58:	ed87 7b04 	vstr	d7, [r7, #16]
      dev-> TEMP = data;
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b62:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

      }else{
          return -1;
      }
  return rslt;
 8000b66:	7ffb      	ldrb	r3, [r7, #31]
 8000b68:	e000      	b.n	8000b6c <Temp+0x64>
          return -1;
 8000b6a:	23ff      	movs	r3, #255	; 0xff
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	f3af 8000 	nop.w
 8000b78:	66666666 	.word	0x66666666
 8000b7c:	4032e666 	.word	0x4032e666
 8000b80:	00000000 	.word	0x00000000
 8000b84:	40711000 	.word	0x40711000
 8000b88:	140000ef 	.word	0x140000ef

08000b8c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000b90:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000b92:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <MX_SPI4_Init+0xa8>)
 8000b94:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000b98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b9c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000ba6:	2207      	movs	r2, #7
 8000ba8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bbc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_SPI4_Init+0xa4>)
 8000c1c:	f003 f80e 	bl	8003c3c <HAL_SPI_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000c26:	f7ff fcaf 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000060 	.word	0x24000060
 8000c34:	40013400 	.word	0x40013400

08000c38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0ba      	sub	sp, #232	; 0xe8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	22c0      	movs	r2, #192	; 0xc0
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 fdad 	bl	80047b8 <memset>
  if(spiHandle->Instance==SPI4)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a27      	ldr	r2, [pc, #156]	; (8000d00 <HAL_SPI_MspInit+0xc8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d146      	bne.n	8000cf6 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_CSI;
 8000c74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c78:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fc6e 	bl	8002560 <HAL_RCCEx_PeriphCLKConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000c8a:	f7ff fc7d 	bl	8000588 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <HAL_SPI_MspInit+0xcc>)
 8000c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c94:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <HAL_SPI_MspInit+0xcc>)
 8000c96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_SPI_MspInit+0xcc>)
 8000ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_SPI_MspInit+0xcc>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <HAL_SPI_MspInit+0xcc>)
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_SPI_MspInit+0xcc>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE6     ------> SPI4_MOSI
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13;
 8000cca:	f44f 5341 	mov.w	r3, #12352	; 0x3040
 8000cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_SPI_MspInit+0xd0>)
 8000cf2:	f000 faa7 	bl	8001244 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	37e8      	adds	r7, #232	; 0xe8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40013400 	.word	0x40013400
 8000d04:	58024400 	.word	0x58024400
 8000d08:	58021000 	.word	0x58021000

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_MspInit+0x30>)
 8000d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d18:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_MspInit+0x30>)
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_MspInit+0x30>)
 8000d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	58024400 	.word	0x58024400

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f926 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d98:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <SystemInit+0xe4>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a36      	ldr	r2, [pc, #216]	; (8000e78 <SystemInit+0xe4>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000da8:	4b34      	ldr	r3, [pc, #208]	; (8000e7c <SystemInit+0xe8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 030f 	and.w	r3, r3, #15
 8000db0:	2b06      	cmp	r3, #6
 8000db2:	d807      	bhi.n	8000dc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000db4:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <SystemInit+0xe8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f023 030f 	bic.w	r3, r3, #15
 8000dbc:	4a2f      	ldr	r2, [pc, #188]	; (8000e7c <SystemInit+0xe8>)
 8000dbe:	f043 0307 	orr.w	r3, r3, #7
 8000dc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dc4:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <SystemInit+0xec>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a2d      	ldr	r2, [pc, #180]	; (8000e80 <SystemInit+0xec>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <SystemInit+0xec>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <SystemInit+0xec>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4929      	ldr	r1, [pc, #164]	; (8000e80 <SystemInit+0xec>)
 8000ddc:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <SystemInit+0xf0>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <SystemInit+0xe8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d007      	beq.n	8000dfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <SystemInit+0xe8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 030f 	bic.w	r3, r3, #15
 8000df6:	4a21      	ldr	r2, [pc, #132]	; (8000e7c <SystemInit+0xe8>)
 8000df8:	f043 0307 	orr.w	r3, r3, #7
 8000dfc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <SystemInit+0xec>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <SystemInit+0xec>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <SystemInit+0xec>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <SystemInit+0xec>)
 8000e12:	4a1d      	ldr	r2, [pc, #116]	; (8000e88 <SystemInit+0xf4>)
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <SystemInit+0xec>)
 8000e18:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <SystemInit+0xf8>)
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <SystemInit+0xec>)
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <SystemInit+0xfc>)
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <SystemInit+0xec>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <SystemInit+0xec>)
 8000e2a:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <SystemInit+0xfc>)
 8000e2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <SystemInit+0xec>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <SystemInit+0xec>)
 8000e36:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <SystemInit+0xfc>)
 8000e38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <SystemInit+0xec>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <SystemInit+0xec>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <SystemInit+0xec>)
 8000e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <SystemInit+0xec>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <SystemInit+0x100>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <SystemInit+0x104>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e5e:	d202      	bcs.n	8000e66 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <SystemInit+0x108>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <SystemInit+0x10c>)
 8000e68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	52002000 	.word	0x52002000
 8000e80:	58024400 	.word	0x58024400
 8000e84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e88:	02020200 	.word	0x02020200
 8000e8c:	01ff0000 	.word	0x01ff0000
 8000e90:	01010280 	.word	0x01010280
 8000e94:	5c001000 	.word	0x5c001000
 8000e98:	ffff0000 	.word	0xffff0000
 8000e9c:	51008108 	.word	0x51008108
 8000ea0:	52004000 	.word	0x52004000

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000edc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea8:	f7ff ff74 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	; (8000ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f003 fc4d 	bl	8004770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fa53 	bl	8000380 <main>
  bx  lr
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000edc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ee0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ee4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ee8:	080047f8 	.word	0x080047f8
  ldr r2, =_sbss
 8000eec:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ef0:	240000ec 	.word	0x240000ec

08000ef4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC3_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efe:	2003      	movs	r0, #3
 8000f00:	f000 f96e 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f04:	f001 f9b2 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_Init+0x68>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	4913      	ldr	r1, [pc, #76]	; (8000f64 <HAL_Init+0x6c>)
 8000f16:	5ccb      	ldrb	r3, [r1, r3]
 8000f18:	f003 031f 	and.w	r3, r3, #31
 8000f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_Init+0x68>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_Init+0x6c>)
 8000f2c:	5cd3      	ldrb	r3, [r2, r3]
 8000f2e:	f003 031f 	and.w	r3, r3, #31
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	fa22 f303 	lsr.w	r3, r2, r3
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_Init+0x70>)
 8000f3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f3c:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <HAL_Init+0x74>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f814 	bl	8000f70 <HAL_InitTick>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e002      	b.n	8000f58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f52:	f7ff fedb 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	58024400 	.word	0x58024400
 8000f64:	080047e0 	.word	0x080047e0
 8000f68:	24000004 	.word	0x24000004
 8000f6c:	24000000 	.word	0x24000000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_InitTick+0x60>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e021      	b.n	8000fc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_InitTick+0x64>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_InitTick+0x60>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f945 	bl	800122a <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 f91d 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x68>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2400000c 	.word	0x2400000c
 8000fd4:	24000000 	.word	0x24000000
 8000fd8:	24000008 	.word	0x24000008

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2400000c 	.word	0x2400000c
 8001000:	240000e8 	.word	0x240000e8

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	240000e8 	.word	0x240000e8

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_Delay+0x44>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2400000c 	.word	0x2400000c

08001064 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetREVID+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	0c1b      	lsrs	r3, r3, #16
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	5c001000 	.word	0x5c001000

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <__NVIC_SetPriorityGrouping+0x40>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x40>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	05fa0000 	.word	0x05fa0000

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff47 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001204:	f7ff ff5e 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff ff90 	bl	8001134 <NVIC_EncodePriority>
 8001214:	4602      	mov	r2, r0
 8001216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff5f 	bl	80010e0 <__NVIC_SetPriority>
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffb2 	bl	800119c <SysTick_Config>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001252:	4b89      	ldr	r3, [pc, #548]	; (8001478 <HAL_GPIO_Init+0x234>)
 8001254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001256:	e194      	b.n	8001582 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2101      	movs	r1, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8186 	beq.w	800157c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d005      	beq.n	8001288 <HAL_GPIO_Init+0x44>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d130      	bne.n	80012ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012be:	2201      	movs	r2, #1
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	f003 0201 	and.w	r2, r3, #1
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d017      	beq.n	8001326 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d123      	bne.n	800137a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	69b9      	ldr	r1, [r7, #24]
 8001376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0203 	and.w	r2, r3, #3
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 80e0 	beq.w	800157c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013bc:	4b2f      	ldr	r3, [pc, #188]	; (800147c <HAL_GPIO_Init+0x238>)
 80013be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c2:	4a2e      	ldr	r2, [pc, #184]	; (800147c <HAL_GPIO_Init+0x238>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_GPIO_Init+0x238>)
 80013ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013da:	4a29      	ldr	r2, [pc, #164]	; (8001480 <HAL_GPIO_Init+0x23c>)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3302      	adds	r3, #2
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a20      	ldr	r2, [pc, #128]	; (8001484 <HAL_GPIO_Init+0x240>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d052      	beq.n	80014ac <HAL_GPIO_Init+0x268>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <HAL_GPIO_Init+0x244>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d031      	beq.n	8001472 <HAL_GPIO_Init+0x22e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a1e      	ldr	r2, [pc, #120]	; (800148c <HAL_GPIO_Init+0x248>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d02b      	beq.n	800146e <HAL_GPIO_Init+0x22a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <HAL_GPIO_Init+0x24c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d025      	beq.n	800146a <HAL_GPIO_Init+0x226>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a1c      	ldr	r2, [pc, #112]	; (8001494 <HAL_GPIO_Init+0x250>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d01f      	beq.n	8001466 <HAL_GPIO_Init+0x222>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <HAL_GPIO_Init+0x254>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x21e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a1a      	ldr	r2, [pc, #104]	; (800149c <HAL_GPIO_Init+0x258>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x21a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_GPIO_Init+0x25c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x216>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <HAL_GPIO_Init+0x260>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x212>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <HAL_GPIO_Init+0x264>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x20e>
 800144e:	2309      	movs	r3, #9
 8001450:	e02d      	b.n	80014ae <HAL_GPIO_Init+0x26a>
 8001452:	230a      	movs	r3, #10
 8001454:	e02b      	b.n	80014ae <HAL_GPIO_Init+0x26a>
 8001456:	2308      	movs	r3, #8
 8001458:	e029      	b.n	80014ae <HAL_GPIO_Init+0x26a>
 800145a:	2307      	movs	r3, #7
 800145c:	e027      	b.n	80014ae <HAL_GPIO_Init+0x26a>
 800145e:	2306      	movs	r3, #6
 8001460:	e025      	b.n	80014ae <HAL_GPIO_Init+0x26a>
 8001462:	2305      	movs	r3, #5
 8001464:	e023      	b.n	80014ae <HAL_GPIO_Init+0x26a>
 8001466:	2304      	movs	r3, #4
 8001468:	e021      	b.n	80014ae <HAL_GPIO_Init+0x26a>
 800146a:	2303      	movs	r3, #3
 800146c:	e01f      	b.n	80014ae <HAL_GPIO_Init+0x26a>
 800146e:	2302      	movs	r3, #2
 8001470:	e01d      	b.n	80014ae <HAL_GPIO_Init+0x26a>
 8001472:	2301      	movs	r3, #1
 8001474:	e01b      	b.n	80014ae <HAL_GPIO_Init+0x26a>
 8001476:	bf00      	nop
 8001478:	58000080 	.word	0x58000080
 800147c:	58024400 	.word	0x58024400
 8001480:	58000400 	.word	0x58000400
 8001484:	58020000 	.word	0x58020000
 8001488:	58020400 	.word	0x58020400
 800148c:	58020800 	.word	0x58020800
 8001490:	58020c00 	.word	0x58020c00
 8001494:	58021000 	.word	0x58021000
 8001498:	58021400 	.word	0x58021400
 800149c:	58021800 	.word	0x58021800
 80014a0:	58021c00 	.word	0x58021c00
 80014a4:	58022000 	.word	0x58022000
 80014a8:	58022400 	.word	0x58022400
 80014ac:	2300      	movs	r3, #0
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	f002 0203 	and.w	r2, r2, #3
 80014b4:	0092      	lsls	r2, r2, #2
 80014b6:	4093      	lsls	r3, r2
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014be:	4938      	ldr	r1, [pc, #224]	; (80015a0 <HAL_GPIO_Init+0x35c>)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3302      	adds	r3, #2
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	3301      	adds	r3, #1
 8001580:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	f47f ae63 	bne.w	8001258 <HAL_GPIO_Init+0x14>
  }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	3724      	adds	r7, #36	; 0x24
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	58000400 	.word	0x58000400

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015c0:	e003      	b.n	80015ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	041a      	lsls	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_PWREx_ConfigSupply+0x70>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d00a      	beq.n	8001602 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_PWREx_ConfigSupply+0x70>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d001      	beq.n	80015fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e01f      	b.n	800163e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e01d      	b.n	800163e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_PWREx_ConfigSupply+0x70>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	f023 0207 	bic.w	r2, r3, #7
 800160a:	490f      	ldr	r1, [pc, #60]	; (8001648 <HAL_PWREx_ConfigSupply+0x70>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4313      	orrs	r3, r2
 8001610:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001612:	f7ff fcf7 	bl	8001004 <HAL_GetTick>
 8001616:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001618:	e009      	b.n	800162e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800161a:	f7ff fcf3 	bl	8001004 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001628:	d901      	bls.n	800162e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e007      	b.n	800163e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_PWREx_ConfigSupply+0x70>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800163a:	d1ee      	bne.n	800161a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	58024800 	.word	0x58024800

0800164c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	; 0x30
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	f000 bc48 	b.w	8001ef0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 8088 	beq.w	800177e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166e:	4b99      	ldr	r3, [pc, #612]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001678:	4b96      	ldr	r3, [pc, #600]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	2b10      	cmp	r3, #16
 8001682:	d007      	beq.n	8001694 <HAL_RCC_OscConfig+0x48>
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	2b18      	cmp	r3, #24
 8001688:	d111      	bne.n	80016ae <HAL_RCC_OscConfig+0x62>
 800168a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	4b8f      	ldr	r3, [pc, #572]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d06d      	beq.n	800177c <HAL_RCC_OscConfig+0x130>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d169      	bne.n	800177c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f000 bc21 	b.w	8001ef0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0x7a>
 80016b8:	4b86      	ldr	r3, [pc, #536]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a85      	ldr	r2, [pc, #532]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80016be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e02e      	b.n	8001724 <HAL_RCC_OscConfig+0xd8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x9c>
 80016ce:	4b81      	ldr	r3, [pc, #516]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a80      	ldr	r2, [pc, #512]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80016d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b7e      	ldr	r3, [pc, #504]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a7d      	ldr	r2, [pc, #500]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80016e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e01d      	b.n	8001724 <HAL_RCC_OscConfig+0xd8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0xc0>
 80016f2:	4b78      	ldr	r3, [pc, #480]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a77      	ldr	r2, [pc, #476]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b75      	ldr	r3, [pc, #468]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a74      	ldr	r2, [pc, #464]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0xd8>
 800170c:	4b71      	ldr	r3, [pc, #452]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a70      	ldr	r2, [pc, #448]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 8001712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b6e      	ldr	r3, [pc, #440]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a6d      	ldr	r2, [pc, #436]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 800171e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fc6a 	bl	8001004 <HAL_GetTick>
 8001730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fc66 	bl	8001004 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e3d4      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0xe8>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fc56 	bl	8001004 <HAL_GetTick>
 8001758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fc52 	bl	8001004 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e3c0      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800176e:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x110>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80ca 	beq.w	8001920 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178c:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001794:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001796:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_RCC_OscConfig+0x166>
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	2b18      	cmp	r3, #24
 80017a6:	d156      	bne.n	8001856 <HAL_RCC_OscConfig+0x20a>
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d151      	bne.n	8001856 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b2:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <HAL_RCC_OscConfig+0x17e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e392      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017ca:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 0219 	bic.w	r2, r3, #25
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	493f      	ldr	r1, [pc, #252]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff fc12 	bl	8001004 <HAL_GetTick>
 80017e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff fc0e 	bl	8001004 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e37c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	f7ff fc2f 	bl	8001064 <HAL_GetREVID>
 8001806:	4603      	mov	r3, r0
 8001808:	f241 0203 	movw	r2, #4099	; 0x1003
 800180c:	4293      	cmp	r3, r2
 800180e:	d817      	bhi.n	8001840 <HAL_RCC_OscConfig+0x1f4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b40      	cmp	r3, #64	; 0x40
 8001816:	d108      	bne.n	800182a <HAL_RCC_OscConfig+0x1de>
 8001818:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001820:	4a2c      	ldr	r2, [pc, #176]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 8001822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001826:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001828:	e07a      	b.n	8001920 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	031b      	lsls	r3, r3, #12
 8001838:	4926      	ldr	r1, [pc, #152]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800183e:	e06f      	b.n	8001920 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	061b      	lsls	r3, r3, #24
 800184e:	4921      	ldr	r1, [pc, #132]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001854:	e064      	b.n	8001920 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d047      	beq.n	80018ee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 0219 	bic.w	r2, r3, #25
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	491a      	ldr	r1, [pc, #104]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fbc8 	bl	8001004 <HAL_GetTick>
 8001874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001878:	f7ff fbc4 	bl	8001004 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e332      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	f7ff fbe5 	bl	8001064 <HAL_GetREVID>
 800189a:	4603      	mov	r3, r0
 800189c:	f241 0203 	movw	r2, #4099	; 0x1003
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d819      	bhi.n	80018d8 <HAL_RCC_OscConfig+0x28c>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b40      	cmp	r3, #64	; 0x40
 80018aa:	d108      	bne.n	80018be <HAL_RCC_OscConfig+0x272>
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80018b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ba:	6053      	str	r3, [r2, #4]
 80018bc:	e030      	b.n	8001920 <HAL_RCC_OscConfig+0x2d4>
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	031b      	lsls	r3, r3, #12
 80018cc:	4901      	ldr	r1, [pc, #4]	; (80018d4 <HAL_RCC_OscConfig+0x288>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
 80018d2:	e025      	b.n	8001920 <HAL_RCC_OscConfig+0x2d4>
 80018d4:	58024400 	.word	0x58024400
 80018d8:	4b9a      	ldr	r3, [pc, #616]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	4997      	ldr	r1, [pc, #604]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	e018      	b.n	8001920 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ee:	4b95      	ldr	r3, [pc, #596]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a94      	ldr	r2, [pc, #592]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff fb83 	bl	8001004 <HAL_GetTick>
 80018fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff fb7f 	bl	8001004 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e2ed      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001914:	4b8b      	ldr	r3, [pc, #556]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80a9 	beq.w	8001a80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192e:	4b85      	ldr	r3, [pc, #532]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001936:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001938:	4b82      	ldr	r3, [pc, #520]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b08      	cmp	r3, #8
 8001942:	d007      	beq.n	8001954 <HAL_RCC_OscConfig+0x308>
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b18      	cmp	r3, #24
 8001948:	d13a      	bne.n	80019c0 <HAL_RCC_OscConfig+0x374>
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d135      	bne.n	80019c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001954:	4b7b      	ldr	r3, [pc, #492]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_OscConfig+0x320>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b80      	cmp	r3, #128	; 0x80
 8001966:	d001      	beq.n	800196c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e2c1      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800196c:	f7ff fb7a 	bl	8001064 <HAL_GetREVID>
 8001970:	4603      	mov	r3, r0
 8001972:	f241 0203 	movw	r2, #4099	; 0x1003
 8001976:	4293      	cmp	r3, r2
 8001978:	d817      	bhi.n	80019aa <HAL_RCC_OscConfig+0x35e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	2b20      	cmp	r3, #32
 8001980:	d108      	bne.n	8001994 <HAL_RCC_OscConfig+0x348>
 8001982:	4b70      	ldr	r3, [pc, #448]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800198a:	4a6e      	ldr	r2, [pc, #440]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 800198c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001990:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001992:	e075      	b.n	8001a80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001994:	4b6b      	ldr	r3, [pc, #428]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	069b      	lsls	r3, r3, #26
 80019a2:	4968      	ldr	r1, [pc, #416]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019a8:	e06a      	b.n	8001a80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019aa:	4b66      	ldr	r3, [pc, #408]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	061b      	lsls	r3, r3, #24
 80019b8:	4962      	ldr	r1, [pc, #392]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019be:	e05f      	b.n	8001a80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d042      	beq.n	8001a4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019c8:	4b5e      	ldr	r3, [pc, #376]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a5d      	ldr	r2, [pc, #372]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 80019ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fb16 	bl	8001004 <HAL_GetTick>
 80019d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019dc:	f7ff fb12 	bl	8001004 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e280      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019ee:	4b55      	ldr	r3, [pc, #340]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019fa:	f7ff fb33 	bl	8001064 <HAL_GetREVID>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d817      	bhi.n	8001a38 <HAL_RCC_OscConfig+0x3ec>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	2b20      	cmp	r3, #32
 8001a0e:	d108      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3d6>
 8001a10:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a18:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001a1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a1e:	6053      	str	r3, [r2, #4]
 8001a20:	e02e      	b.n	8001a80 <HAL_RCC_OscConfig+0x434>
 8001a22:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	069b      	lsls	r3, r3, #26
 8001a30:	4944      	ldr	r1, [pc, #272]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
 8001a36:	e023      	b.n	8001a80 <HAL_RCC_OscConfig+0x434>
 8001a38:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	493f      	ldr	r1, [pc, #252]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60cb      	str	r3, [r1, #12]
 8001a4c:	e018      	b.n	8001a80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a3c      	ldr	r2, [pc, #240]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff fad3 	bl	8001004 <HAL_GetTick>
 8001a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a62:	f7ff facf 	bl	8001004 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e23d      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a74:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d036      	beq.n	8001afa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d019      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a98:	4a2a      	ldr	r2, [pc, #168]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fab0 	bl	8001004 <HAL_GetTick>
 8001aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff faac 	bl	8001004 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e21a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001aba:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x45c>
 8001ac6:	e018      	b.n	8001afa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001acc:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fa96 	bl	8001004 <HAL_GetTick>
 8001ad8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff fa92 	bl	8001004 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e200      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d039      	beq.n	8001b7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d01c      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff fa73 	bl	8001004 <HAL_GetTick>
 8001b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b22:	f7ff fa6f 	bl	8001004 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1dd      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x4d6>
 8001b40:	e01b      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
 8001b42:	bf00      	nop
 8001b44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b48:	4b9b      	ldr	r3, [pc, #620]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a9a      	ldr	r2, [pc, #616]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b54:	f7ff fa56 	bl	8001004 <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b5c:	f7ff fa52 	bl	8001004 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1c0      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b6e:	4b92      	ldr	r3, [pc, #584]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8081 	beq.w	8001c8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b88:	4b8c      	ldr	r3, [pc, #560]	; (8001dbc <HAL_RCC_OscConfig+0x770>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a8b      	ldr	r2, [pc, #556]	; (8001dbc <HAL_RCC_OscConfig+0x770>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b94:	f7ff fa36 	bl	8001004 <HAL_GetTick>
 8001b98:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9c:	f7ff fa32 	bl	8001004 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1a0      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bae:	4b83      	ldr	r3, [pc, #524]	; (8001dbc <HAL_RCC_OscConfig+0x770>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d106      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x584>
 8001bc2:	4b7d      	ldr	r3, [pc, #500]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	4a7c      	ldr	r2, [pc, #496]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bce:	e02d      	b.n	8001c2c <HAL_RCC_OscConfig+0x5e0>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x5a6>
 8001bd8:	4b77      	ldr	r3, [pc, #476]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	4a76      	ldr	r2, [pc, #472]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	6713      	str	r3, [r2, #112]	; 0x70
 8001be4:	4b74      	ldr	r3, [pc, #464]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	4a73      	ldr	r2, [pc, #460]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001bea:	f023 0304 	bic.w	r3, r3, #4
 8001bee:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf0:	e01c      	b.n	8001c2c <HAL_RCC_OscConfig+0x5e0>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5c8>
 8001bfa:	4b6f      	ldr	r3, [pc, #444]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	4a6e      	ldr	r2, [pc, #440]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6713      	str	r3, [r2, #112]	; 0x70
 8001c06:	4b6c      	ldr	r3, [pc, #432]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	4a6b      	ldr	r2, [pc, #428]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6713      	str	r3, [r2, #112]	; 0x70
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0x5e0>
 8001c14:	4b68      	ldr	r3, [pc, #416]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	4a67      	ldr	r2, [pc, #412]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c20:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	4a64      	ldr	r2, [pc, #400]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001c26:	f023 0304 	bic.w	r3, r3, #4
 8001c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d015      	beq.n	8001c60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff f9e6 	bl	8001004 <HAL_GetTick>
 8001c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f9e2 	bl	8001004 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e14e      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c52:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0ee      	beq.n	8001c3c <HAL_RCC_OscConfig+0x5f0>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff f9d0 	bl	8001004 <HAL_GetTick>
 8001c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff f9cc 	bl	8001004 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e138      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c7e:	4b4e      	ldr	r3, [pc, #312]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1ee      	bne.n	8001c68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 812d 	beq.w	8001eee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c94:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c9c:	2b18      	cmp	r3, #24
 8001c9e:	f000 80bd 	beq.w	8001e1c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	f040 809e 	bne.w	8001de8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cac:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a41      	ldr	r2, [pc, #260]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f9a4 	bl	8001004 <HAL_GetTick>
 8001cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f9a0 	bl	8001004 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e10e      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cd2:	4b39      	ldr	r3, [pc, #228]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cde:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ce2:	4b37      	ldr	r3, [pc, #220]	; (8001dc0 <HAL_RCC_OscConfig+0x774>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	4931      	ldr	r1, [pc, #196]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	628b      	str	r3, [r1, #40]	; 0x28
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	3b01      	subs	r3, #1
 8001d08:	025b      	lsls	r3, r3, #9
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d12:	3b01      	subs	r3, #1
 8001d14:	041b      	lsls	r3, r3, #16
 8001d16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d20:	3b01      	subs	r3, #1
 8001d22:	061b      	lsls	r3, r3, #24
 8001d24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d28:	4923      	ldr	r1, [pc, #140]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001d2e:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	4a21      	ldr	r2, [pc, #132]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_RCC_OscConfig+0x778>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d46:	00d2      	lsls	r2, r2, #3
 8001d48:	491b      	ldr	r1, [pc, #108]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	f023 020c 	bic.w	r2, r3, #12
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4917      	ldr	r1, [pc, #92]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	f023 0202 	bic.w	r2, r3, #2
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	4912      	ldr	r1, [pc, #72]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_RCC_OscConfig+0x76c>)
 8001da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dae:	f7ff f929 	bl	8001004 <HAL_GetTick>
 8001db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001db4:	e011      	b.n	8001dda <HAL_RCC_OscConfig+0x78e>
 8001db6:	bf00      	nop
 8001db8:	58024400 	.word	0x58024400
 8001dbc:	58024800 	.word	0x58024800
 8001dc0:	fffffc0c 	.word	0xfffffc0c
 8001dc4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff f91c 	bl	8001004 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e08a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x77c>
 8001de6:	e082      	b.n	8001eee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de8:	4b43      	ldr	r3, [pc, #268]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a42      	ldr	r2, [pc, #264]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff f906 	bl	8001004 <HAL_GetTick>
 8001df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff f902 	bl	8001004 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e070      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x7b0>
 8001e1a:	e068      	b.n	8001eee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e1c:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e22:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d031      	beq.n	8001e94 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f003 0203 	and.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d12a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d122      	bne.n	8001e94 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d11a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	0a5b      	lsrs	r3, r3, #9
 8001e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d111      	bne.n	8001e94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	0c1b      	lsrs	r3, r3, #16
 8001e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d108      	bne.n	8001e94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	0e1b      	lsrs	r3, r3, #24
 8001e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e02b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e98:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	08db      	lsrs	r3, r3, #3
 8001e9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ea2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d01f      	beq.n	8001eee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eba:	f7ff f8a3 	bl	8001004 <HAL_GetTick>
 8001ebe:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ec0:	bf00      	nop
 8001ec2:	f7ff f89f 	bl	8001004 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d0f9      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_RCC_OscConfig+0x8b0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001eda:	00d2      	lsls	r2, r2, #3
 8001edc:	4906      	ldr	r1, [pc, #24]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <HAL_RCC_OscConfig+0x8ac>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3730      	adds	r7, #48	; 0x30
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	58024400 	.word	0x58024400
 8001efc:	ffff0007 	.word	0xffff0007

08001f00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e19c      	b.n	800224e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b8a      	ldr	r3, [pc, #552]	; (8002140 <HAL_RCC_ClockConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d910      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b87      	ldr	r3, [pc, #540]	; (8002140 <HAL_RCC_ClockConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 020f 	bic.w	r2, r3, #15
 8001f2a:	4985      	ldr	r1, [pc, #532]	; (8002140 <HAL_RCC_ClockConfig+0x240>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b83      	ldr	r3, [pc, #524]	; (8002140 <HAL_RCC_ClockConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e184      	b.n	800224e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d010      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	4b7b      	ldr	r3, [pc, #492]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d908      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f60:	4b78      	ldr	r3, [pc, #480]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	4975      	ldr	r1, [pc, #468]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	4b70      	ldr	r3, [pc, #448]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d908      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f8e:	4b6d      	ldr	r3, [pc, #436]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	496a      	ldr	r1, [pc, #424]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d010      	beq.n	8001fce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	4b64      	ldr	r3, [pc, #400]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d908      	bls.n	8001fce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fbc:	4b61      	ldr	r3, [pc, #388]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	495e      	ldr	r1, [pc, #376]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d010      	beq.n	8001ffc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d908      	bls.n	8001ffc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fea:	4b56      	ldr	r3, [pc, #344]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4953      	ldr	r1, [pc, #332]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d010      	beq.n	800202a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	429a      	cmp	r2, r3
 8002016:	d908      	bls.n	800202a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	4b4a      	ldr	r3, [pc, #296]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f023 020f 	bic.w	r2, r3, #15
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4947      	ldr	r1, [pc, #284]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8002026:	4313      	orrs	r3, r2
 8002028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d055      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002036:	4b43      	ldr	r3, [pc, #268]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4940      	ldr	r1, [pc, #256]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8002044:	4313      	orrs	r3, r2
 8002046:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d107      	bne.n	8002060 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002050:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d121      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0f6      	b.n	800224e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d107      	bne.n	8002078 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d115      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0ea      	b.n	800224e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d107      	bne.n	8002090 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d109      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0de      	b.n	800224e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002090:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0d6      	b.n	800224e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020a0:	4b28      	ldr	r3, [pc, #160]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f023 0207 	bic.w	r2, r3, #7
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4925      	ldr	r1, [pc, #148]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b2:	f7fe ffa7 	bl	8001004 <HAL_GetTick>
 80020b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ba:	f7fe ffa3 	bl	8001004 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0be      	b.n	800224e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d0:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	429a      	cmp	r2, r3
 80020e0:	d1eb      	bne.n	80020ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d010      	beq.n	8002110 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d208      	bcs.n	8002110 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f023 020f 	bic.w	r2, r3, #15
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	490e      	ldr	r1, [pc, #56]	; (8002144 <HAL_RCC_ClockConfig+0x244>)
 800210c:	4313      	orrs	r3, r2
 800210e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_ClockConfig+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d214      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_RCC_ClockConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 020f 	bic.w	r2, r3, #15
 8002126:	4906      	ldr	r1, [pc, #24]	; (8002140 <HAL_RCC_ClockConfig+0x240>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <HAL_RCC_ClockConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e086      	b.n	800224e <HAL_RCC_ClockConfig+0x34e>
 8002140:	52002000 	.word	0x52002000
 8002144:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	4b3f      	ldr	r3, [pc, #252]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002160:	429a      	cmp	r2, r3
 8002162:	d208      	bcs.n	8002176 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002164:	4b3c      	ldr	r3, [pc, #240]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	4939      	ldr	r1, [pc, #228]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 8002172:	4313      	orrs	r3, r2
 8002174:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d010      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	4b34      	ldr	r3, [pc, #208]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800218e:	429a      	cmp	r2, r3
 8002190:	d208      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	492e      	ldr	r1, [pc, #184]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d010      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699a      	ldr	r2, [r3, #24]
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021bc:	429a      	cmp	r2, r3
 80021be:	d208      	bcs.n	80021d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4922      	ldr	r1, [pc, #136]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0320 	and.w	r3, r3, #32
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d010      	beq.n	8002200 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d208      	bcs.n	8002200 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4917      	ldr	r1, [pc, #92]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002200:	f000 f834 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	4912      	ldr	r1, [pc, #72]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
 800221c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_RCC_ClockConfig+0x358>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 8002228:	5cd3      	ldrb	r3, [r2, r3]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x360>)
 8002236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <HAL_RCC_ClockConfig+0x364>)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_RCC_ClockConfig+0x368>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fe94 	bl	8000f70 <HAL_InitTick>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800224c:	7bfb      	ldrb	r3, [r7, #15]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	58024400 	.word	0x58024400
 800225c:	080047e0 	.word	0x080047e0
 8002260:	24000004 	.word	0x24000004
 8002264:	24000000 	.word	0x24000000
 8002268:	24000008 	.word	0x24000008

0800226c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002272:	4bb3      	ldr	r3, [pc, #716]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800227a:	2b18      	cmp	r3, #24
 800227c:	f200 8155 	bhi.w	800252a <HAL_RCC_GetSysClockFreq+0x2be>
 8002280:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	080022ed 	.word	0x080022ed
 800228c:	0800252b 	.word	0x0800252b
 8002290:	0800252b 	.word	0x0800252b
 8002294:	0800252b 	.word	0x0800252b
 8002298:	0800252b 	.word	0x0800252b
 800229c:	0800252b 	.word	0x0800252b
 80022a0:	0800252b 	.word	0x0800252b
 80022a4:	0800252b 	.word	0x0800252b
 80022a8:	08002313 	.word	0x08002313
 80022ac:	0800252b 	.word	0x0800252b
 80022b0:	0800252b 	.word	0x0800252b
 80022b4:	0800252b 	.word	0x0800252b
 80022b8:	0800252b 	.word	0x0800252b
 80022bc:	0800252b 	.word	0x0800252b
 80022c0:	0800252b 	.word	0x0800252b
 80022c4:	0800252b 	.word	0x0800252b
 80022c8:	08002319 	.word	0x08002319
 80022cc:	0800252b 	.word	0x0800252b
 80022d0:	0800252b 	.word	0x0800252b
 80022d4:	0800252b 	.word	0x0800252b
 80022d8:	0800252b 	.word	0x0800252b
 80022dc:	0800252b 	.word	0x0800252b
 80022e0:	0800252b 	.word	0x0800252b
 80022e4:	0800252b 	.word	0x0800252b
 80022e8:	0800231f 	.word	0x0800231f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022ec:	4b94      	ldr	r3, [pc, #592]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022f8:	4b91      	ldr	r3, [pc, #580]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	08db      	lsrs	r3, r3, #3
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	4a90      	ldr	r2, [pc, #576]	; (8002544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800230a:	e111      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800230c:	4b8d      	ldr	r3, [pc, #564]	; (8002544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800230e:	61bb      	str	r3, [r7, #24]
      break;
 8002310:	e10e      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002312:	4b8d      	ldr	r3, [pc, #564]	; (8002548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002314:	61bb      	str	r3, [r7, #24]
      break;
 8002316:	e10b      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002318:	4b8c      	ldr	r3, [pc, #560]	; (800254c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800231a:	61bb      	str	r3, [r7, #24]
      break;
 800231c:	e108      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800231e:	4b88      	ldr	r3, [pc, #544]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002328:	4b85      	ldr	r3, [pc, #532]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002332:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002334:	4b82      	ldr	r3, [pc, #520]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800233e:	4b80      	ldr	r3, [pc, #512]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002342:	08db      	lsrs	r3, r3, #3
 8002344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002356:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80e1 	beq.w	8002524 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b02      	cmp	r3, #2
 8002366:	f000 8083 	beq.w	8002470 <HAL_RCC_GetSysClockFreq+0x204>
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b02      	cmp	r3, #2
 800236e:	f200 80a1 	bhi.w	80024b4 <HAL_RCC_GetSysClockFreq+0x248>
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x114>
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d056      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x1c0>
 800237e:	e099      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002380:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d02d      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800238c:	4b6c      	ldr	r3, [pc, #432]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	4a6b      	ldr	r2, [pc, #428]	; (8002544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023b6:	4b62      	ldr	r3, [pc, #392]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80023e6:	e087      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002554 <HAL_RCC_GetSysClockFreq+0x2e8>
 80023f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023fa:	4b51      	ldr	r3, [pc, #324]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800240a:	ed97 6a02 	vldr	s12, [r7, #8]
 800240e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800241a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800241e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002426:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800242a:	e065      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002436:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002558 <HAL_RCC_GetSysClockFreq+0x2ec>
 800243a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800243e:	4b40      	ldr	r3, [pc, #256]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800244e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002452:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800245a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800245e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800246e:	e043      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800255c <HAL_RCC_GetSysClockFreq+0x2f0>
 800247e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002482:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002492:	ed97 6a02 	vldr	s12, [r7, #8]
 8002496:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002550 <HAL_RCC_GetSysClockFreq+0x2e4>
 800249a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800249e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024b2:	e021      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002558 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c6:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	0a5b      	lsrs	r3, r3, #9
 80024fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002502:	3301      	adds	r3, #1
 8002504:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002510:	edd7 6a07 	vldr	s13, [r7, #28]
 8002514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800251c:	ee17 3a90 	vmov	r3, s15
 8002520:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002522:	e005      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
      break;
 8002528:	e002      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800252c:	61bb      	str	r3, [r7, #24]
      break;
 800252e:	bf00      	nop
  }

  return sysclockfreq;
 8002530:	69bb      	ldr	r3, [r7, #24]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	58024400 	.word	0x58024400
 8002544:	03d09000 	.word	0x03d09000
 8002548:	003d0900 	.word	0x003d0900
 800254c:	017d7840 	.word	0x017d7840
 8002550:	46000000 	.word	0x46000000
 8002554:	4c742400 	.word	0x4c742400
 8002558:	4a742400 	.word	0x4a742400
 800255c:	4bbebc20 	.word	0x4bbebc20

08002560 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002564:	b0ca      	sub	sp, #296	; 0x128
 8002566:	af00      	add	r7, sp, #0
 8002568:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800256c:	2300      	movs	r3, #0
 800256e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002572:	2300      	movs	r3, #0
 8002574:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002584:	2500      	movs	r5, #0
 8002586:	ea54 0305 	orrs.w	r3, r4, r5
 800258a:	d049      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800258c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002592:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002596:	d02f      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002598:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800259c:	d828      	bhi.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800259e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025a2:	d01a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025a8:	d822      	bhi.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025b2:	d007      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025b4:	e01c      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b6:	4bb8      	ldr	r3, [pc, #736]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	4ab7      	ldr	r2, [pc, #732]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025c2:	e01a      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80025c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025c8:	3308      	adds	r3, #8
 80025ca:	2102      	movs	r1, #2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 f9d1 	bl	8003974 <RCCEx_PLL2_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025d8:	e00f      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80025da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025de:	3328      	adds	r3, #40	; 0x28
 80025e0:	2102      	movs	r1, #2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 fa78 	bl	8003ad8 <RCCEx_PLL3_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025ee:	e004      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80025f6:	e000      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80025f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10a      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002602:	4ba5      	ldr	r3, [pc, #660]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002606:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800260a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800260e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002610:	4aa1      	ldr	r2, [pc, #644]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002612:	430b      	orrs	r3, r1
 8002614:	6513      	str	r3, [r2, #80]	; 0x50
 8002616:	e003      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002618:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800261c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800262c:	f04f 0900 	mov.w	r9, #0
 8002630:	ea58 0309 	orrs.w	r3, r8, r9
 8002634:	d047      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	2b04      	cmp	r3, #4
 800263e:	d82a      	bhi.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002640:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002646:	bf00      	nop
 8002648:	0800265d 	.word	0x0800265d
 800264c:	0800266b 	.word	0x0800266b
 8002650:	08002681 	.word	0x08002681
 8002654:	0800269f 	.word	0x0800269f
 8002658:	0800269f 	.word	0x0800269f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800265c:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	4a8d      	ldr	r2, [pc, #564]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002668:	e01a      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800266a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800266e:	3308      	adds	r3, #8
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f001 f97e 	bl	8003974 <RCCEx_PLL2_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800267e:	e00f      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002684:	3328      	adds	r3, #40	; 0x28
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fa25 	bl	8003ad8 <RCCEx_PLL3_Config>
 800268e:	4603      	mov	r3, r0
 8002690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002694:	e004      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800269c:	e000      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800269e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026a8:	4b7b      	ldr	r3, [pc, #492]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	f023 0107 	bic.w	r1, r3, #7
 80026b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	4a78      	ldr	r2, [pc, #480]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6513      	str	r3, [r2, #80]	; 0x50
 80026bc:	e003      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80026c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80026d2:	f04f 0b00 	mov.w	fp, #0
 80026d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80026da:	d04c      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80026dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	d030      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80026e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ec:	d829      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026ee:	2bc0      	cmp	r3, #192	; 0xc0
 80026f0:	d02d      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80026f2:	2bc0      	cmp	r3, #192	; 0xc0
 80026f4:	d825      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026f6:	2b80      	cmp	r3, #128	; 0x80
 80026f8:	d018      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80026fa:	2b80      	cmp	r3, #128	; 0x80
 80026fc:	d821      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002702:	2b40      	cmp	r3, #64	; 0x40
 8002704:	d007      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002706:	e01c      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002708:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	4a62      	ldr	r2, [pc, #392]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800270e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002714:	e01c      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800271a:	3308      	adds	r3, #8
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f001 f928 	bl	8003974 <RCCEx_PLL2_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800272a:	e011      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800272c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002730:	3328      	adds	r3, #40	; 0x28
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f001 f9cf 	bl	8003ad8 <RCCEx_PLL3_Config>
 800273a:	4603      	mov	r3, r0
 800273c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002740:	e006      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002748:	e002      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800274a:	bf00      	nop
 800274c:	e000      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800274e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002758:	4b4f      	ldr	r3, [pc, #316]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800275a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002768:	430b      	orrs	r3, r1
 800276a:	6513      	str	r3, [r2, #80]	; 0x50
 800276c:	e003      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800276e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002772:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002782:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800278c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002790:	460b      	mov	r3, r1
 8002792:	4313      	orrs	r3, r2
 8002794:	d053      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800279a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800279e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027a2:	d035      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80027a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027a8:	d82e      	bhi.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80027ae:	d031      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80027b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80027b4:	d828      	bhi.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ba:	d01a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80027bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c0:	d822      	bhi.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80027c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027ca:	d007      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80027cc:	e01c      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	4a31      	ldr	r2, [pc, #196]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027da:	e01c      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027e0:	3308      	adds	r3, #8
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f001 f8c5 	bl	8003974 <RCCEx_PLL2_Config>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80027f0:	e011      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027f6:	3328      	adds	r3, #40	; 0x28
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 f96c 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002806:	e006      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800280e:	e002      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002810:	bf00      	nop
 8002812:	e000      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10b      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800281e:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800282a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800282e:	4a1a      	ldr	r2, [pc, #104]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002830:	430b      	orrs	r3, r1
 8002832:	6593      	str	r3, [r2, #88]	; 0x58
 8002834:	e003      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800283a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800283e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800284a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002854:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002858:	460b      	mov	r3, r1
 800285a:	4313      	orrs	r3, r2
 800285c:	d056      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800285e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002862:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002866:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800286a:	d038      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800286c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002870:	d831      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002872:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002876:	d034      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002878:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800287c:	d82b      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800287e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002882:	d01d      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002888:	d825      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800288e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002894:	e01f      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002896:	bf00      	nop
 8002898:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289c:	4ba2      	ldr	r3, [pc, #648]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	4aa1      	ldr	r2, [pc, #644]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028a8:	e01c      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ae:	3308      	adds	r3, #8
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 f85e 	bl	8003974 <RCCEx_PLL2_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80028be:	e011      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028c4:	3328      	adds	r3, #40	; 0x28
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f001 f905 	bl	8003ad8 <RCCEx_PLL3_Config>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028d4:	e006      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80028dc:	e002      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80028de:	bf00      	nop
 80028e0:	e000      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80028e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028ec:	4b8e      	ldr	r3, [pc, #568]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80028f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80028fc:	4a8a      	ldr	r2, [pc, #552]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028fe:	430b      	orrs	r3, r1
 8002900:	6593      	str	r3, [r2, #88]	; 0x58
 8002902:	e003      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002908:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800290c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002918:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002922:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002926:	460b      	mov	r3, r1
 8002928:	4313      	orrs	r3, r2
 800292a:	d03a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800292c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	2b30      	cmp	r3, #48	; 0x30
 8002934:	d01f      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002936:	2b30      	cmp	r3, #48	; 0x30
 8002938:	d819      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800293a:	2b20      	cmp	r3, #32
 800293c:	d00c      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800293e:	2b20      	cmp	r3, #32
 8002940:	d815      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002942:	2b00      	cmp	r3, #0
 8002944:	d019      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002946:	2b10      	cmp	r3, #16
 8002948:	d111      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800294a:	4b77      	ldr	r3, [pc, #476]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	4a76      	ldr	r2, [pc, #472]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002954:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002956:	e011      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800295c:	3308      	adds	r3, #8
 800295e:	2102      	movs	r1, #2
 8002960:	4618      	mov	r0, r3
 8002962:	f001 f807 	bl	8003974 <RCCEx_PLL2_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800296c:	e006      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002974:	e002      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800297a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800297c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002984:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002988:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800298c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	4a65      	ldr	r2, [pc, #404]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002994:	430b      	orrs	r3, r1
 8002996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002998:	e003      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800299e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80029ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80029b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80029bc:	460b      	mov	r3, r1
 80029be:	4313      	orrs	r3, r2
 80029c0:	d051      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80029c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029cc:	d035      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80029ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029d2:	d82e      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80029d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029d8:	d031      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80029da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029de:	d828      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80029e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e4:	d01a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80029e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ea:	d822      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80029f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f4:	d007      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80029f6:	e01c      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029f8:	4b4b      	ldr	r3, [pc, #300]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	4a4a      	ldr	r2, [pc, #296]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a04:	e01c      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a0a:	3308      	adds	r3, #8
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 ffb0 	bl	8003974 <RCCEx_PLL2_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a1a:	e011      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a20:	3328      	adds	r3, #40	; 0x28
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 f857 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a30:	e006      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a38:	e002      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a3a:	bf00      	nop
 8002a3c:	e000      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a48:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a56:	4a34      	ldr	r2, [pc, #208]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	6513      	str	r3, [r2, #80]	; 0x50
 8002a5c:	e003      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002a72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a76:	2300      	movs	r3, #0
 8002a78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002a7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002a80:	460b      	mov	r3, r1
 8002a82:	4313      	orrs	r3, r2
 8002a84:	d056      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a90:	d033      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002a92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a96:	d82c      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a9c:	d02f      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002a9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aa2:	d826      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002aa4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002aa8:	d02b      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002aaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002aae:	d820      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ab4:	d012      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aba:	d81a      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d022      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac4:	d115      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aca:	3308      	adds	r3, #8
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 ff50 	bl	8003974 <RCCEx_PLL2_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ada:	e015      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae0:	3328      	adds	r3, #40	; 0x28
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fff7 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002af0:	e00a      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002af8:	e006      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002afa:	bf00      	nop
 8002afc:	e004      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002afe:	bf00      	nop
 8002b00:	e002      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b02:	bf00      	nop
 8002b04:	e000      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10d      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b14:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1e:	4a02      	ldr	r2, [pc, #8]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6513      	str	r3, [r2, #80]	; 0x50
 8002b24:	e006      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b26:	bf00      	nop
 8002b28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002b40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4313      	orrs	r3, r2
 8002b52:	d055      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b60:	d033      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b66:	d82c      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6c:	d02f      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b72:	d826      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b78:	d02b      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002b7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b7e:	d820      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b84:	d012      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b8a:	d81a      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d022      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b94:	d115      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fee8 	bl	8003974 <RCCEx_PLL2_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002baa:	e015      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bb0:	3328      	adds	r3, #40	; 0x28
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 ff8f 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002bc8:	e006      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bca:	bf00      	nop
 8002bcc:	e004      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bce:	bf00      	nop
 8002bd0:	e002      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002be0:	4ba3      	ldr	r3, [pc, #652]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bf0:	4a9f      	ldr	r2, [pc, #636]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf6:	e003      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002c16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	d037      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c2a:	d00e      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c30:	d816      	bhi.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d018      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c3a:	d111      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c3c:	4b8c      	ldr	r3, [pc, #560]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	4a8b      	ldr	r2, [pc, #556]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c48:	e00f      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c4e:	3308      	adds	r3, #8
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fe8e 	bl	8003974 <RCCEx_PLL2_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c5e:	e004      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c66:	e000      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c72:	4b7f      	ldr	r3, [pc, #508]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	4a7b      	ldr	r2, [pc, #492]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c82:	430b      	orrs	r3, r1
 8002c84:	6513      	str	r3, [r2, #80]	; 0x50
 8002c86:	e003      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ca6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4313      	orrs	r3, r2
 8002cae:	d039      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d81c      	bhi.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002cfd 	.word	0x08002cfd
 8002cc4:	08002cd1 	.word	0x08002cd1
 8002cc8:	08002cdf 	.word	0x08002cdf
 8002ccc:	08002cfd 	.word	0x08002cfd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd0:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	4a66      	ldr	r2, [pc, #408]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cdc:	e00f      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fe44 	bl	8003974 <RCCEx_PLL2_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cf2:	e004      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cfa:	e000      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d06:	4b5a      	ldr	r3, [pc, #360]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	f023 0103 	bic.w	r1, r3, #3
 8002d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d14:	4a56      	ldr	r2, [pc, #344]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d16:	430b      	orrs	r3, r1
 8002d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d1a:	e003      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002d30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f000 809f 	beq.w	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d46:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a4a      	ldr	r2, [pc, #296]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d52:	f7fe f957 	bl	8001004 <HAL_GetTick>
 8002d56:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5c:	f7fe f952 	bl	8001004 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b64      	cmp	r3, #100	; 0x64
 8002d6a:	d903      	bls.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d72:	e005      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d74:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ed      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002d80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d179      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d88:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d94:	4053      	eors	r3, r2
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d015      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d9e:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002daa:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	4a30      	ldr	r2, [pc, #192]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002db6:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	4a2d      	ldr	r2, [pc, #180]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002dc2:	4a2b      	ldr	r2, [pc, #172]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd6:	d118      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f914 	bl	8001004 <HAL_GetTick>
 8002ddc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002de0:	e00d      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe f90f 	bl	8001004 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002dec:	1ad2      	subs	r2, r2, r3
 8002dee:	f241 3388 	movw	r3, #5000	; 0x1388
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d903      	bls.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002dfc:	e005      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0eb      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d129      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e22:	d10e      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e34:	091a      	lsrs	r2, r3, #4
 8002e36:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6113      	str	r3, [r2, #16]
 8002e40:	e005      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e4c:	6113      	str	r3, [r2, #16]
 8002e4e:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e50:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5e:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e60:	430b      	orrs	r3, r1
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	e00e      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002e6e:	e009      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002e70:	58024400 	.word	0x58024400
 8002e74:	58024800 	.word	0x58024800
 8002e78:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f002 0301 	and.w	r3, r2, #1
 8002e90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e94:	2300      	movs	r3, #0
 8002e96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f000 8089 	beq.w	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eac:	2b28      	cmp	r3, #40	; 0x28
 8002eae:	d86b      	bhi.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002eb0:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002f91 	.word	0x08002f91
 8002ebc:	08002f89 	.word	0x08002f89
 8002ec0:	08002f89 	.word	0x08002f89
 8002ec4:	08002f89 	.word	0x08002f89
 8002ec8:	08002f89 	.word	0x08002f89
 8002ecc:	08002f89 	.word	0x08002f89
 8002ed0:	08002f89 	.word	0x08002f89
 8002ed4:	08002f89 	.word	0x08002f89
 8002ed8:	08002f5d 	.word	0x08002f5d
 8002edc:	08002f89 	.word	0x08002f89
 8002ee0:	08002f89 	.word	0x08002f89
 8002ee4:	08002f89 	.word	0x08002f89
 8002ee8:	08002f89 	.word	0x08002f89
 8002eec:	08002f89 	.word	0x08002f89
 8002ef0:	08002f89 	.word	0x08002f89
 8002ef4:	08002f89 	.word	0x08002f89
 8002ef8:	08002f73 	.word	0x08002f73
 8002efc:	08002f89 	.word	0x08002f89
 8002f00:	08002f89 	.word	0x08002f89
 8002f04:	08002f89 	.word	0x08002f89
 8002f08:	08002f89 	.word	0x08002f89
 8002f0c:	08002f89 	.word	0x08002f89
 8002f10:	08002f89 	.word	0x08002f89
 8002f14:	08002f89 	.word	0x08002f89
 8002f18:	08002f91 	.word	0x08002f91
 8002f1c:	08002f89 	.word	0x08002f89
 8002f20:	08002f89 	.word	0x08002f89
 8002f24:	08002f89 	.word	0x08002f89
 8002f28:	08002f89 	.word	0x08002f89
 8002f2c:	08002f89 	.word	0x08002f89
 8002f30:	08002f89 	.word	0x08002f89
 8002f34:	08002f89 	.word	0x08002f89
 8002f38:	08002f91 	.word	0x08002f91
 8002f3c:	08002f89 	.word	0x08002f89
 8002f40:	08002f89 	.word	0x08002f89
 8002f44:	08002f89 	.word	0x08002f89
 8002f48:	08002f89 	.word	0x08002f89
 8002f4c:	08002f89 	.word	0x08002f89
 8002f50:	08002f89 	.word	0x08002f89
 8002f54:	08002f89 	.word	0x08002f89
 8002f58:	08002f91 	.word	0x08002f91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f60:	3308      	adds	r3, #8
 8002f62:	2101      	movs	r1, #1
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fd05 	bl	8003974 <RCCEx_PLL2_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f70:	e00f      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f76:	3328      	adds	r3, #40	; 0x28
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fdac 	bl	8003ad8 <RCCEx_PLL3_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f86:	e004      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f9a:	4bbf      	ldr	r3, [pc, #764]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa8:	4abb      	ldr	r2, [pc, #748]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002faa:	430b      	orrs	r3, r1
 8002fac:	6553      	str	r3, [r2, #84]	; 0x54
 8002fae:	e003      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	f002 0302 	and.w	r3, r2, #2
 8002fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002fce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	d041      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d824      	bhi.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002fe2:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	08003035 	.word	0x08003035
 8002fec:	08003001 	.word	0x08003001
 8002ff0:	08003017 	.word	0x08003017
 8002ff4:	08003035 	.word	0x08003035
 8002ff8:	08003035 	.word	0x08003035
 8002ffc:	08003035 	.word	0x08003035
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003004:	3308      	adds	r3, #8
 8003006:	2101      	movs	r1, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fcb3 	bl	8003974 <RCCEx_PLL2_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003014:	e00f      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800301a:	3328      	adds	r3, #40	; 0x28
 800301c:	2101      	movs	r1, #1
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fd5a 	bl	8003ad8 <RCCEx_PLL3_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800302a:	e004      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003032:	e000      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800303e:	4b96      	ldr	r3, [pc, #600]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	f023 0107 	bic.w	r1, r3, #7
 8003046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800304c:	4a92      	ldr	r2, [pc, #584]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800304e:	430b      	orrs	r3, r1
 8003050:	6553      	str	r3, [r2, #84]	; 0x54
 8003052:	e003      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003058:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800305c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f002 0304 	and.w	r3, r2, #4
 8003068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003072:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003076:	460b      	mov	r3, r1
 8003078:	4313      	orrs	r3, r2
 800307a:	d044      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800307c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003084:	2b05      	cmp	r3, #5
 8003086:	d825      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003088:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030dd 	.word	0x080030dd
 8003094:	080030a9 	.word	0x080030a9
 8003098:	080030bf 	.word	0x080030bf
 800309c:	080030dd 	.word	0x080030dd
 80030a0:	080030dd 	.word	0x080030dd
 80030a4:	080030dd 	.word	0x080030dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ac:	3308      	adds	r3, #8
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fc5f 	bl	8003974 <RCCEx_PLL2_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030bc:	e00f      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030c2:	3328      	adds	r3, #40	; 0x28
 80030c4:	2101      	movs	r1, #1
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fd06 	bl	8003ad8 <RCCEx_PLL3_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030d2:	e004      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030da:	e000      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80030dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10b      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030e6:	4b6c      	ldr	r3, [pc, #432]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ea:	f023 0107 	bic.w	r1, r3, #7
 80030ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f6:	4a68      	ldr	r2, [pc, #416]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6593      	str	r3, [r2, #88]	; 0x58
 80030fc:	e003      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003102:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310e:	f002 0320 	and.w	r3, r2, #32
 8003112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800311c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003120:	460b      	mov	r3, r1
 8003122:	4313      	orrs	r3, r2
 8003124:	d055      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003132:	d033      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003138:	d82c      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800313a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313e:	d02f      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d826      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800314a:	d02b      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800314c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003150:	d820      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003156:	d012      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315c:	d81a      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d022      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003166:	d115      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800316c:	3308      	adds	r3, #8
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fbff 	bl	8003974 <RCCEx_PLL2_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800317c:	e015      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800317e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003182:	3328      	adds	r3, #40	; 0x28
 8003184:	2102      	movs	r1, #2
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fca6 	bl	8003ad8 <RCCEx_PLL3_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003192:	e00a      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800319a:	e006      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800319c:	bf00      	nop
 800319e:	e004      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031a0:	bf00      	nop
 80031a2:	e002      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031a4:	bf00      	nop
 80031a6:	e000      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80031a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031b2:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80031ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c2:	4a35      	ldr	r2, [pc, #212]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6553      	str	r3, [r2, #84]	; 0x54
 80031c8:	e003      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031da:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80031de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80031e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4313      	orrs	r3, r2
 80031f0:	d058      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80031f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031fe:	d033      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003200:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003204:	d82c      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320a:	d02f      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800320c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003210:	d826      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003212:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003216:	d02b      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800321c:	d820      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800321e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003222:	d012      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003228:	d81a      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800322a:	2b00      	cmp	r3, #0
 800322c:	d022      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003232:	d115      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003238:	3308      	adds	r3, #8
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fb99 	bl	8003974 <RCCEx_PLL2_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003248:	e015      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800324e:	3328      	adds	r3, #40	; 0x28
 8003250:	2102      	movs	r1, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fc40 	bl	8003ad8 <RCCEx_PLL3_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800325e:	e00a      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003266:	e006      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003268:	bf00      	nop
 800326a:	e004      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800326c:	bf00      	nop
 800326e:	e002      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003270:	bf00      	nop
 8003272:	e000      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10e      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800328a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800328e:	4a02      	ldr	r2, [pc, #8]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003290:	430b      	orrs	r3, r1
 8003292:	6593      	str	r3, [r2, #88]	; 0x58
 8003294:	e006      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003296:	bf00      	nop
 8003298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80032b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80032be:	460b      	mov	r3, r1
 80032c0:	4313      	orrs	r3, r2
 80032c2:	d055      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80032c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032d0:	d033      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80032d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032d6:	d82c      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80032d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032dc:	d02f      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80032de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e2:	d826      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80032e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032e8:	d02b      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80032ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032ee:	d820      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80032f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f4:	d012      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80032f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032fa:	d81a      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d022      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003304:	d115      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330a:	3308      	adds	r3, #8
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fb30 	bl	8003974 <RCCEx_PLL2_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800331a:	e015      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800331c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003320:	3328      	adds	r3, #40	; 0x28
 8003322:	2102      	movs	r1, #2
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fbd7 	bl	8003ad8 <RCCEx_PLL3_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003330:	e00a      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003338:	e006      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800333a:	bf00      	nop
 800333c:	e004      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800333e:	bf00      	nop
 8003340:	e002      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003342:	bf00      	nop
 8003344:	e000      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003350:	4ba1      	ldr	r3, [pc, #644]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800335c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003360:	4a9d      	ldr	r2, [pc, #628]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003362:	430b      	orrs	r3, r1
 8003364:	6593      	str	r3, [r2, #88]	; 0x58
 8003366:	e003      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800336c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f002 0308 	and.w	r3, r2, #8
 800337c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003386:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800338a:	460b      	mov	r3, r1
 800338c:	4313      	orrs	r3, r2
 800338e:	d01e      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339c:	d10c      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800339e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a2:	3328      	adds	r3, #40	; 0x28
 80033a4:	2102      	movs	r1, #2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fb96 	bl	8003ad8 <RCCEx_PLL3_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033b8:	4b87      	ldr	r3, [pc, #540]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c8:	4a83      	ldr	r2, [pc, #524]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033ca:	430b      	orrs	r3, r1
 80033cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	f002 0310 	and.w	r3, r2, #16
 80033da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033de:	2300      	movs	r3, #0
 80033e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80033e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80033e8:	460b      	mov	r3, r1
 80033ea:	4313      	orrs	r3, r2
 80033ec:	d01e      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80033ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fa:	d10c      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003400:	3328      	adds	r3, #40	; 0x28
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fb67 	bl	8003ad8 <RCCEx_PLL3_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003416:	4b70      	ldr	r3, [pc, #448]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003426:	4a6c      	ldr	r2, [pc, #432]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003428:	430b      	orrs	r3, r1
 800342a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800343c:	2300      	movs	r3, #0
 800343e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003442:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003446:	460b      	mov	r3, r1
 8003448:	4313      	orrs	r3, r2
 800344a:	d03e      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800344c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003450:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003458:	d022      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800345a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800345e:	d81b      	bhi.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003468:	d00b      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800346a:	e015      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800346c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003470:	3308      	adds	r3, #8
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fa7d 	bl	8003974 <RCCEx_PLL2_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003480:	e00f      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003486:	3328      	adds	r3, #40	; 0x28
 8003488:	2102      	movs	r1, #2
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fb24 	bl	8003ad8 <RCCEx_PLL3_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003496:	e004      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800349e:	e000      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80034a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034aa:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034ba:	4a47      	ldr	r2, [pc, #284]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034bc:	430b      	orrs	r3, r1
 80034be:	6593      	str	r3, [r2, #88]	; 0x58
 80034c0:	e003      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80034d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80034d8:	2300      	movs	r3, #0
 80034da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80034e0:	460b      	mov	r3, r1
 80034e2:	4313      	orrs	r3, r2
 80034e4:	d03b      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80034e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034f2:	d01f      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80034f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034f8:	d818      	bhi.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80034fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034fe:	d003      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003500:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003504:	d007      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003506:	e011      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003508:	4b33      	ldr	r3, [pc, #204]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	4a32      	ldr	r2, [pc, #200]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800350e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003514:	e00f      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800351a:	3328      	adds	r3, #40	; 0x28
 800351c:	2101      	movs	r1, #1
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fada 	bl	8003ad8 <RCCEx_PLL3_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800352a:	e004      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003532:	e000      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800353e:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003542:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	4a22      	ldr	r2, [pc, #136]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003550:	430b      	orrs	r3, r1
 8003552:	6553      	str	r3, [r2, #84]	; 0x54
 8003554:	e003      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800355a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800355e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003566:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800356a:	673b      	str	r3, [r7, #112]	; 0x70
 800356c:	2300      	movs	r3, #0
 800356e:	677b      	str	r3, [r7, #116]	; 0x74
 8003570:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003574:	460b      	mov	r3, r1
 8003576:	4313      	orrs	r3, r2
 8003578:	d034      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800357e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003588:	d007      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800358a:	e011      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003598:	e00e      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359e:	3308      	adds	r3, #8
 80035a0:	2102      	movs	r1, #2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f9e6 	bl	8003974 <RCCEx_PLL2_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035ae:	e003      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10d      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ce:	4a02      	ldr	r2, [pc, #8]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035d4:	e006      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80035d6:	bf00      	nop
 80035d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80035f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80035f2:	2300      	movs	r3, #0
 80035f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80035fa:	460b      	mov	r3, r1
 80035fc:	4313      	orrs	r3, r2
 80035fe:	d00c      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003604:	3328      	adds	r3, #40	; 0x28
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fa65 	bl	8003ad8 <RCCEx_PLL3_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800361a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003626:	663b      	str	r3, [r7, #96]	; 0x60
 8003628:	2300      	movs	r3, #0
 800362a:	667b      	str	r3, [r7, #100]	; 0x64
 800362c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003630:	460b      	mov	r3, r1
 8003632:	4313      	orrs	r3, r2
 8003634:	d038      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003642:	d018      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003648:	d811      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800364a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364e:	d014      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d80b      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d011      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800365a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365e:	d106      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003660:	4bc3      	ldr	r3, [pc, #780]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	4ac2      	ldr	r2, [pc, #776]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800366a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800366c:	e008      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003674:	e004      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003676:	bf00      	nop
 8003678:	e002      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800367e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003688:	4bb9      	ldr	r3, [pc, #740]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003698:	4ab5      	ldr	r2, [pc, #724]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800369a:	430b      	orrs	r3, r1
 800369c:	6553      	str	r3, [r2, #84]	; 0x54
 800369e:	e003      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80036b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80036b6:	2300      	movs	r3, #0
 80036b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d009      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036c4:	4baa      	ldr	r3, [pc, #680]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d2:	4aa7      	ldr	r2, [pc, #668]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80036e4:	653b      	str	r3, [r7, #80]	; 0x50
 80036e6:	2300      	movs	r3, #0
 80036e8:	657b      	str	r3, [r7, #84]	; 0x54
 80036ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80036ee:	460b      	mov	r3, r1
 80036f0:	4313      	orrs	r3, r2
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036f4:	4b9e      	ldr	r3, [pc, #632]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003700:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003704:	4a9a      	ldr	r2, [pc, #616]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003706:	430b      	orrs	r3, r1
 8003708:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003716:	64bb      	str	r3, [r7, #72]	; 0x48
 8003718:	2300      	movs	r3, #0
 800371a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800371c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003720:	460b      	mov	r3, r1
 8003722:	4313      	orrs	r3, r2
 8003724:	d009      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003726:	4b92      	ldr	r3, [pc, #584]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003734:	4a8e      	ldr	r2, [pc, #568]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003736:	430b      	orrs	r3, r1
 8003738:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003746:	643b      	str	r3, [r7, #64]	; 0x40
 8003748:	2300      	movs	r3, #0
 800374a:	647b      	str	r3, [r7, #68]	; 0x44
 800374c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003750:	460b      	mov	r3, r1
 8003752:	4313      	orrs	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003756:	4b86      	ldr	r3, [pc, #536]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	4a85      	ldr	r2, [pc, #532]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800375c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003760:	6113      	str	r3, [r2, #16]
 8003762:	4b83      	ldr	r3, [pc, #524]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003764:	6919      	ldr	r1, [r3, #16]
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800376e:	4a80      	ldr	r2, [pc, #512]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003770:	430b      	orrs	r3, r1
 8003772:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003780:	63bb      	str	r3, [r7, #56]	; 0x38
 8003782:	2300      	movs	r3, #0
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003786:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800378a:	460b      	mov	r3, r1
 800378c:	4313      	orrs	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003790:	4b77      	ldr	r3, [pc, #476]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003794:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	4a74      	ldr	r2, [pc, #464]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037a0:	430b      	orrs	r3, r1
 80037a2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30
 80037b2:	2300      	movs	r3, #0
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
 80037b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80037ba:	460b      	mov	r3, r1
 80037bc:	4313      	orrs	r3, r2
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037c0:	4b6b      	ldr	r3, [pc, #428]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d0:	4a67      	ldr	r2, [pc, #412]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d2:	430b      	orrs	r3, r1
 80037d4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	2100      	movs	r1, #0
 80037e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80037ec:	460b      	mov	r3, r1
 80037ee:	4313      	orrs	r3, r2
 80037f0:	d011      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f6:	3308      	adds	r3, #8
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f8ba 	bl	8003974 <RCCEx_PLL2_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003812:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	2100      	movs	r1, #0
 8003820:	6239      	str	r1, [r7, #32]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
 8003828:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800382c:	460b      	mov	r3, r1
 800382e:	4313      	orrs	r3, r2
 8003830:	d011      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003836:	3308      	adds	r3, #8
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f89a 	bl	8003974 <RCCEx_PLL2_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003852:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	2100      	movs	r1, #0
 8003860:	61b9      	str	r1, [r7, #24]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800386c:	460b      	mov	r3, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	d011      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003876:	3308      	adds	r3, #8
 8003878:	2102      	movs	r1, #2
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f87a 	bl	8003974 <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003892:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	2100      	movs	r1, #0
 80038a0:	6139      	str	r1, [r7, #16]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038ac:	460b      	mov	r3, r1
 80038ae:	4313      	orrs	r3, r2
 80038b0:	d011      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b6:	3328      	adds	r3, #40	; 0x28
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f90c 	bl	8003ad8 <RCCEx_PLL3_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80038c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	2100      	movs	r1, #0
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80038ec:	460b      	mov	r3, r1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	d011      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f6:	3328      	adds	r3, #40	; 0x28
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f8ec 	bl	8003ad8 <RCCEx_PLL3_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003912:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	2100      	movs	r1, #0
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	e9d7 1200 	ldrd	r1, r2, [r7]
 800392c:	460b      	mov	r3, r1
 800392e:	4313      	orrs	r3, r2
 8003930:	d011      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003936:	3328      	adds	r3, #40	; 0x28
 8003938:	2102      	movs	r1, #2
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f8cc 	bl	8003ad8 <RCCEx_PLL3_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003952:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003956:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
}
 8003964:	4618      	mov	r0, r3
 8003966:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800396a:	46bd      	mov	sp, r7
 800396c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003970:	58024400 	.word	0x58024400

08003974 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003982:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b03      	cmp	r3, #3
 800398c:	d101      	bne.n	8003992 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e099      	b.n	8003ac6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003992:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a4e      	ldr	r2, [pc, #312]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003998:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800399c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399e:	f7fd fb31 	bl	8001004 <HAL_GetTick>
 80039a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039a4:	e008      	b.n	80039b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80039a6:	f7fd fb2d 	bl	8001004 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e086      	b.n	8003ac6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039b8:	4b45      	ldr	r3, [pc, #276]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80039c4:	4b42      	ldr	r3, [pc, #264]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	493f      	ldr	r1, [pc, #252]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	628b      	str	r3, [r1, #40]	; 0x28
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	3b01      	subs	r3, #1
 80039de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	025b      	lsls	r3, r3, #9
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	041b      	lsls	r3, r3, #16
 80039f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	061b      	lsls	r3, r3, #24
 8003a04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a08:	4931      	ldr	r1, [pc, #196]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003a0e:	4b30      	ldr	r3, [pc, #192]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	492d      	ldr	r1, [pc, #180]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003a20:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	f023 0220 	bic.w	r2, r3, #32
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	4928      	ldr	r1, [pc, #160]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a32:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a38:	f023 0310 	bic.w	r3, r3, #16
 8003a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <RCCEx_PLL2_Config+0x160>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	69d2      	ldr	r2, [r2, #28]
 8003a4a:	00d2      	lsls	r2, r2, #3
 8003a4c:	4920      	ldr	r1, [pc, #128]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a52:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a58:	f043 0310 	orr.w	r3, r3, #16
 8003a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a64:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	4a19      	ldr	r2, [pc, #100]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a70:	e00f      	b.n	8003a92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d106      	bne.n	8003a86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a84:	e005      	b.n	8003a92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a92:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003a98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9e:	f7fd fab1 	bl	8001004 <HAL_GetTick>
 8003aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003aa4:	e008      	b.n	8003ab8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003aa6:	f7fd faad 	bl	8001004 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e006      	b.n	8003ac6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <RCCEx_PLL2_Config+0x15c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	ffff0007 	.word	0xffff0007

08003ad8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ae6:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d101      	bne.n	8003af6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e099      	b.n	8003c2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003af6:	4b4f      	ldr	r3, [pc, #316]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a4e      	ldr	r2, [pc, #312]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b02:	f7fd fa7f 	bl	8001004 <HAL_GetTick>
 8003b06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003b0a:	f7fd fa7b 	bl	8001004 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e086      	b.n	8003c2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b1c:	4b45      	ldr	r3, [pc, #276]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003b28:	4b42      	ldr	r3, [pc, #264]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	051b      	lsls	r3, r3, #20
 8003b36:	493f      	ldr	r1, [pc, #252]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	628b      	str	r3, [r1, #40]	; 0x28
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	025b      	lsls	r3, r3, #9
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b6c:	4931      	ldr	r1, [pc, #196]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b72:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	492d      	ldr	r1, [pc, #180]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b84:	4b2b      	ldr	r3, [pc, #172]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	4928      	ldr	r1, [pc, #160]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba6:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <RCCEx_PLL3_Config+0x160>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	69d2      	ldr	r2, [r2, #28]
 8003bae:	00d2      	lsls	r2, r2, #3
 8003bb0:	4920      	ldr	r1, [pc, #128]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	4a1e      	ldr	r2, [pc, #120]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bd4:	e00f      	b.n	8003bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003bdc:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	4a14      	ldr	r2, [pc, #80]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003be2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003be6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003be8:	e005      	b.n	8003bf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003bea:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c02:	f7fd f9ff 	bl	8001004 <HAL_GetTick>
 8003c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c08:	e008      	b.n	8003c1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003c0a:	f7fd f9fb 	bl	8001004 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e006      	b.n	8003c2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <RCCEx_PLL3_Config+0x15c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	58024400 	.word	0x58024400
 8003c38:	ffff0007 	.word	0xffff0007

08003c3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e10f      	b.n	8003e6e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a87      	ldr	r2, [pc, #540]	; (8003e78 <HAL_SPI_Init+0x23c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00f      	beq.n	8003c7e <HAL_SPI_Init+0x42>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a86      	ldr	r2, [pc, #536]	; (8003e7c <HAL_SPI_Init+0x240>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00a      	beq.n	8003c7e <HAL_SPI_Init+0x42>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a84      	ldr	r2, [pc, #528]	; (8003e80 <HAL_SPI_Init+0x244>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d005      	beq.n	8003c7e <HAL_SPI_Init+0x42>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b0f      	cmp	r3, #15
 8003c78:	d901      	bls.n	8003c7e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0f7      	b.n	8003e6e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fd5a 	bl	8004738 <SPI_GetPacketSize>
 8003c84:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a7b      	ldr	r2, [pc, #492]	; (8003e78 <HAL_SPI_Init+0x23c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00c      	beq.n	8003caa <HAL_SPI_Init+0x6e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a79      	ldr	r2, [pc, #484]	; (8003e7c <HAL_SPI_Init+0x240>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <HAL_SPI_Init+0x6e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a78      	ldr	r2, [pc, #480]	; (8003e80 <HAL_SPI_Init+0x244>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d002      	beq.n	8003caa <HAL_SPI_Init+0x6e>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d811      	bhi.n	8003cce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003cae:	4a72      	ldr	r2, [pc, #456]	; (8003e78 <HAL_SPI_Init+0x23c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d009      	beq.n	8003cc8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a70      	ldr	r2, [pc, #448]	; (8003e7c <HAL_SPI_Init+0x240>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <HAL_SPI_Init+0x8c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6f      	ldr	r2, [pc, #444]	; (8003e80 <HAL_SPI_Init+0x244>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d104      	bne.n	8003cd2 <HAL_SPI_Init+0x96>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d901      	bls.n	8003cd2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0cd      	b.n	8003e6e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fc ffa6 	bl	8000c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003d0e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d18:	d119      	bne.n	8003d4e <HAL_SPI_Init+0x112>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d22:	d103      	bne.n	8003d2c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10c      	bne.n	8003d4e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003d38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d3c:	d107      	bne.n	8003d4e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00f      	beq.n	8003d7a <HAL_SPI_Init+0x13e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b06      	cmp	r3, #6
 8003d60:	d90b      	bls.n	8003d7a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	e007      	b.n	8003d8a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69da      	ldr	r2, [r3, #28]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9c:	ea42 0103 	orr.w	r1, r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dea:	ea42 0103 	orr.w	r1, r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d113      	bne.n	8003e2a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e14:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e28:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40013000 	.word	0x40013000
 8003e7c:	40003800 	.word	0x40003800
 8003e80:	40003c00 	.word	0x40003c00

08003e84 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3320      	adds	r3, #32
 8003e9a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_SPI_Transmit+0x2a>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e1e1      	b.n	8004272 <HAL_SPI_Transmit+0x3ee>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eb6:	f7fd f8a5 	bl	8001004 <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d007      	beq.n	8003ed8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003ed4:	7efb      	ldrb	r3, [r7, #27]
 8003ed6:	e1cc      	b.n	8004272 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_SPI_Transmit+0x60>
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d107      	bne.n	8003ef4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003ef0:	7efb      	ldrb	r3, [r7, #27]
 8003ef2:	e1be      	b.n	8004272 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	88fa      	ldrh	r2, [r7, #6]
 8003f0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003f44:	d108      	bne.n	8003f58 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e009      	b.n	8003f6c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003f6a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	4b96      	ldr	r3, [pc, #600]	; (80041cc <HAL_SPI_Transmit+0x348>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	88f9      	ldrh	r1, [r7, #6]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f98:	d107      	bne.n	8003faa <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b0f      	cmp	r3, #15
 8003fb0:	d947      	bls.n	8004042 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003fb2:	e03f      	b.n	8004034 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d114      	bne.n	8003fec <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd2:	1d1a      	adds	r2, r3, #4
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003fea:	e023      	b.n	8004034 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fec:	f7fd f80a 	bl	8001004 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d803      	bhi.n	8004004 <HAL_SPI_Transmit+0x180>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d102      	bne.n	800400a <HAL_SPI_Transmit+0x186>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d114      	bne.n	8004034 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 fac6 	bl	800459c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e11e      	b.n	8004272 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1b9      	bne.n	8003fb4 <HAL_SPI_Transmit+0x130>
 8004040:	e0f1      	b.n	8004226 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b07      	cmp	r3, #7
 8004048:	f240 80e6 	bls.w	8004218 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800404c:	e05d      	b.n	800410a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b02      	cmp	r3, #2
 800405a:	d132      	bne.n	80040c2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d918      	bls.n	800409a <HAL_SPI_Transmit+0x216>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d014      	beq.n	800409a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	1d1a      	adds	r2, r3, #4
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b02      	subs	r3, #2
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004098:	e037      	b.n	800410a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80040c0:	e023      	b.n	800410a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c2:	f7fc ff9f 	bl	8001004 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d803      	bhi.n	80040da <HAL_SPI_Transmit+0x256>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d102      	bne.n	80040e0 <HAL_SPI_Transmit+0x25c>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d114      	bne.n	800410a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fa5b 	bl	800459c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e0b3      	b.n	8004272 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d19b      	bne.n	800404e <HAL_SPI_Transmit+0x1ca>
 8004116:	e086      	b.n	8004226 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d154      	bne.n	80041d0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b03      	cmp	r3, #3
 8004130:	d918      	bls.n	8004164 <HAL_SPI_Transmit+0x2e0>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	2b40      	cmp	r3, #64	; 0x40
 8004138:	d914      	bls.n	8004164 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414a:	1d1a      	adds	r2, r3, #4
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b04      	subs	r3, #4
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004162:	e059      	b.n	8004218 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d917      	bls.n	80041a0 <HAL_SPI_Transmit+0x31c>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d013      	beq.n	80041a0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	881a      	ldrh	r2, [r3, #0]
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004186:	1c9a      	adds	r2, r3, #2
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b02      	subs	r3, #2
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800419e:	e03b      	b.n	8004218 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3320      	adds	r3, #32
 80041aa:	7812      	ldrb	r2, [r2, #0]
 80041ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80041ca:	e025      	b.n	8004218 <HAL_SPI_Transmit+0x394>
 80041cc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d0:	f7fc ff18 	bl	8001004 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d803      	bhi.n	80041e8 <HAL_SPI_Transmit+0x364>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	d102      	bne.n	80041ee <HAL_SPI_Transmit+0x36a>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d114      	bne.n	8004218 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f9d4 	bl	800459c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004202:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e02c      	b.n	8004272 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	f47f af79 	bne.w	8004118 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2200      	movs	r2, #0
 800422e:	2108      	movs	r1, #8
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fa53 	bl	80046dc <SPI_WaitOnFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f9a5 	bl	800459c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8004270:	7efb      	ldrb	r3, [r7, #27]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3720      	adds	r7, #32
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop

0800427c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3330      	adds	r3, #48	; 0x30
 8004296:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_SPI_Receive+0x2a>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e173      	b.n	800458e <HAL_SPI_Receive+0x312>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ae:	f7fc fea9 	bl	8001004 <HAL_GetTick>
 80042b2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d007      	beq.n	80042d0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
 80042c2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80042cc:	7ffb      	ldrb	r3, [r7, #31]
 80042ce:	e15e      	b.n	800458e <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_SPI_Receive+0x60>
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d107      	bne.n	80042ec <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80042e8:	7ffb      	ldrb	r3, [r7, #31]
 80042ea:	e150      	b.n	800458e <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2204      	movs	r2, #4
 80042f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	88fa      	ldrh	r2, [r7, #6]
 8004306:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800433c:	d108      	bne.n	8004350 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e009      	b.n	8004364 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004362:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	4b8b      	ldr	r3, [pc, #556]	; (8004598 <HAL_SPI_Receive+0x31c>)
 800436c:	4013      	ands	r3, r2
 800436e:	88f9      	ldrh	r1, [r7, #6]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	430b      	orrs	r3, r1
 8004376:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004390:	d107      	bne.n	80043a2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	2b0f      	cmp	r3, #15
 80043a8:	d948      	bls.n	800443c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80043aa:	e040      	b.n	800442e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	f248 0308 	movw	r3, #32776	; 0x8008
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d014      	beq.n	80043e6 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043c6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043cc:	1d1a      	adds	r2, r3, #4
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80043e4:	e023      	b.n	800442e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043e6:	f7fc fe0d 	bl	8001004 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d803      	bhi.n	80043fe <HAL_SPI_Receive+0x182>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d102      	bne.n	8004404 <HAL_SPI_Receive+0x188>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d114      	bne.n	800442e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f8c9 	bl	800459c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004418:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e0af      	b.n	800458e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1b8      	bne.n	80043ac <HAL_SPI_Receive+0x130>
 800443a:	e095      	b.n	8004568 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b07      	cmp	r3, #7
 8004442:	f240 808b 	bls.w	800455c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004446:	e03f      	b.n	80044c8 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b01      	cmp	r3, #1
 8004454:	d114      	bne.n	8004480 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	8812      	ldrh	r2, [r2, #0]
 800445e:	b292      	uxth	r2, r2
 8004460:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004466:	1c9a      	adds	r2, r3, #2
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800447e:	e023      	b.n	80044c8 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004480:	f7fc fdc0 	bl	8001004 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d803      	bhi.n	8004498 <HAL_SPI_Receive+0x21c>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004496:	d102      	bne.n	800449e <HAL_SPI_Receive+0x222>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d114      	bne.n	80044c8 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f87c 	bl	800459c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e062      	b.n	800458e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1b9      	bne.n	8004448 <HAL_SPI_Receive+0x1cc>
 80044d4:	e048      	b.n	8004568 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d117      	bne.n	8004514 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004512:	e023      	b.n	800455c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004514:	f7fc fd76 	bl	8001004 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d803      	bhi.n	800452c <HAL_SPI_Receive+0x2b0>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d102      	bne.n	8004532 <HAL_SPI_Receive+0x2b6>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d114      	bne.n	800455c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f832 	bl	800459c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004546:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e018      	b.n	800458e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1b6      	bne.n	80044d6 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f817 	bl	800459c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800458c:	7ffb      	ldrb	r3, [r7, #31]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	ffff0000 	.word	0xffff0000

0800459c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0208 	orr.w	r2, r2, #8
 80045ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0210 	orr.w	r2, r2, #16
 80045ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6919      	ldr	r1, [r3, #16]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b3c      	ldr	r3, [pc, #240]	; (80046d8 <SPI_CloseTransfer+0x13c>)
 80045e8:	400b      	ands	r3, r1
 80045ea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80045fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b04      	cmp	r3, #4
 8004606:	d014      	beq.n	8004632 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00f      	beq.n	8004632 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004618:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699a      	ldr	r2, [r3, #24]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0220 	orr.w	r2, r2, #32
 8004630:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b03      	cmp	r3, #3
 800463c:	d014      	beq.n	8004668 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00f      	beq.n	8004668 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464e:	f043 0204 	orr.w	r2, r3, #4
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004666:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00f      	beq.n	8004692 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004678:	f043 0201 	orr.w	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004690:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00f      	beq.n	80046bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a2:	f043 0208 	orr.w	r2, r3, #8
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	fffffc90 	.word	0xfffffc90

080046dc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80046ec:	e010      	b.n	8004710 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ee:	f7fc fc89 	bl	8001004 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d803      	bhi.n	8004706 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d102      	bne.n	800470c <SPI_WaitOnFlagUntilTimeout+0x30>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e00f      	b.n	8004730 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4013      	ands	r3, r2
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	429a      	cmp	r2, r3
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	429a      	cmp	r2, r3
 800472c:	d0df      	beq.n	80046ee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	3301      	adds	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	3301      	adds	r3, #1
 8004750:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	3307      	adds	r3, #7
 8004756:	08db      	lsrs	r3, r3, #3
 8004758:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	fb02 f303 	mul.w	r3, r2, r3
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <__libc_init_array>:
 8004770:	b570      	push	{r4, r5, r6, lr}
 8004772:	4d0d      	ldr	r5, [pc, #52]	; (80047a8 <__libc_init_array+0x38>)
 8004774:	4c0d      	ldr	r4, [pc, #52]	; (80047ac <__libc_init_array+0x3c>)
 8004776:	1b64      	subs	r4, r4, r5
 8004778:	10a4      	asrs	r4, r4, #2
 800477a:	2600      	movs	r6, #0
 800477c:	42a6      	cmp	r6, r4
 800477e:	d109      	bne.n	8004794 <__libc_init_array+0x24>
 8004780:	4d0b      	ldr	r5, [pc, #44]	; (80047b0 <__libc_init_array+0x40>)
 8004782:	4c0c      	ldr	r4, [pc, #48]	; (80047b4 <__libc_init_array+0x44>)
 8004784:	f000 f820 	bl	80047c8 <_init>
 8004788:	1b64      	subs	r4, r4, r5
 800478a:	10a4      	asrs	r4, r4, #2
 800478c:	2600      	movs	r6, #0
 800478e:	42a6      	cmp	r6, r4
 8004790:	d105      	bne.n	800479e <__libc_init_array+0x2e>
 8004792:	bd70      	pop	{r4, r5, r6, pc}
 8004794:	f855 3b04 	ldr.w	r3, [r5], #4
 8004798:	4798      	blx	r3
 800479a:	3601      	adds	r6, #1
 800479c:	e7ee      	b.n	800477c <__libc_init_array+0xc>
 800479e:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a2:	4798      	blx	r3
 80047a4:	3601      	adds	r6, #1
 80047a6:	e7f2      	b.n	800478e <__libc_init_array+0x1e>
 80047a8:	080047f0 	.word	0x080047f0
 80047ac:	080047f0 	.word	0x080047f0
 80047b0:	080047f0 	.word	0x080047f0
 80047b4:	080047f4 	.word	0x080047f4

080047b8 <memset>:
 80047b8:	4402      	add	r2, r0
 80047ba:	4603      	mov	r3, r0
 80047bc:	4293      	cmp	r3, r2
 80047be:	d100      	bne.n	80047c2 <memset+0xa>
 80047c0:	4770      	bx	lr
 80047c2:	f803 1b01 	strb.w	r1, [r3], #1
 80047c6:	e7f9      	b.n	80047bc <memset+0x4>

080047c8 <_init>:
 80047c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ca:	bf00      	nop
 80047cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ce:	bc08      	pop	{r3}
 80047d0:	469e      	mov	lr, r3
 80047d2:	4770      	bx	lr

080047d4 <_fini>:
 80047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d6:	bf00      	nop
 80047d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047da:	bc08      	pop	{r3}
 80047dc:	469e      	mov	lr, r3
 80047de:	4770      	bx	lr
